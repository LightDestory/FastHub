// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package com.fastaccess.data.dao.model;

import android.os.Parcel;

import javax.annotation.Generated;

import io.requery.Persistable;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.StringAttribute;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;

@Generated("io.requery.processor.EntityProcessor")
public class SearchHistory extends AbstractSearchHistory implements Persistable {
    public static final StringAttribute<SearchHistory, String> TEXT = 
    new AttributeBuilder<SearchHistory, String>("text", String.class)
    .setProperty(new Property<SearchHistory, String>() {
        @Override
        public String get(SearchHistory entity) {
            return entity.text;
        }

        @Override
        public void set(SearchHistory entity, String value) {
            entity.text = value;
        }
    })
    .setPropertyName("text")
    .setPropertyState(new Property<SearchHistory, PropertyState>() {
        @Override
        public PropertyState get(SearchHistory entity) {
            return entity.$text_state;
        }

        @Override
        public void set(SearchHistory entity, PropertyState value) {
            entity.$text_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(true)
    .buildString();

    public static final Type<SearchHistory> $TYPE = new TypeBuilder<SearchHistory>(SearchHistory.class, "SearchHistory")
    .setBaseType(AbstractSearchHistory.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<SearchHistory>() {
        @Override
        public SearchHistory get() {
            return new SearchHistory();
        }
    })
    .setProxyProvider(new Function<SearchHistory, EntityProxy<SearchHistory>>() {
        @Override
        public EntityProxy<SearchHistory> apply(SearchHistory entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(TEXT)
    .build();

    private PropertyState $text_state;

    private final transient EntityProxy<SearchHistory> $proxy = new EntityProxy<SearchHistory>(this, $TYPE);

    public SearchHistory(String text) {
        super(text);
    }

    protected SearchHistory(Parcel in) {
        super(in);
    }

    public SearchHistory() {
    }

    public String getText() {
        return $proxy.get(TEXT);
    }

    public void setText(String text) {
        $proxy.set(TEXT, text);
    }
}
