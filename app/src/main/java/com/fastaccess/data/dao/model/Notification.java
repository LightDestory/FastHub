// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package com.fastaccess.data.dao.model;

import android.os.Parcel;

import com.fastaccess.data.dao.NotificationSubjectModel;
import com.fastaccess.data.dao.types.NotificationReason;

import java.util.Date;

import javax.annotation.Generated;

import io.requery.Persistable;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.NumericAttribute;
import io.requery.meta.QueryAttribute;
import io.requery.meta.StringAttribute;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.BooleanProperty;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.LongProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;

@Generated("io.requery.processor.EntityProcessor")
public class Notification extends AbstractNotification implements Persistable {
    public static final QueryAttribute<Notification, Boolean> IS_SUBSCRIBED = 
    new AttributeBuilder<Notification, Boolean>("isSubscribed", boolean.class)
    .setProperty(new BooleanProperty<Notification>() {
        @Override
        public Boolean get(Notification entity) {
            return entity.isSubscribed;
        }

        @Override
        public void set(Notification entity, Boolean value) {
            if(value != null) {
                entity.isSubscribed = value;
            }
        }

        @Override
        public boolean getBoolean(Notification entity) {
            return entity.isSubscribed;
        }

        @Override
        public void setBoolean(Notification entity, boolean value) {
            entity.isSubscribed = value;
        }
    })
    .setPropertyName("isSubscribed")
    .setPropertyState(new Property<Notification, PropertyState>() {
        @Override
        public PropertyState get(Notification entity) {
            return entity.$isSubscribed_state;
        }

        @Override
        public void set(Notification entity, PropertyState value) {
            entity.$isSubscribed_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final NumericAttribute<Notification, Long> ID = 
    new AttributeBuilder<Notification, Long>("id", long.class)
    .setProperty(new LongProperty<Notification>() {
        @Override
        public Long get(Notification entity) {
            return entity.id;
        }

        @Override
        public void set(Notification entity, Long value) {
            entity.id = value;
        }

        @Override
        public long getLong(Notification entity) {
            return entity.id;
        }

        @Override
        public void setLong(Notification entity, long value) {
            entity.id = value;
        }
    })
    .setPropertyName("id")
    .setPropertyState(new Property<Notification, PropertyState>() {
        @Override
        public PropertyState get(Notification entity) {
            return entity.$id_state;
        }

        @Override
        public void set(Notification entity, PropertyState value) {
            entity.$id_state = value;
        }
    })
    .setKey(true)
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final QueryAttribute<Notification, Repo> REPOSITORY = 
    new AttributeBuilder<Notification, Repo>("repository", Repo.class)
    .setProperty(new Property<Notification, Repo>() {
        @Override
        public Repo get(Notification entity) {
            return entity.repository;
        }

        @Override
        public void set(Notification entity, Repo value) {
            entity.repository = value;
        }
    })
    .setPropertyName("repository")
    .setPropertyState(new Property<Notification, PropertyState>() {
        @Override
        public PropertyState get(Notification entity) {
            return entity.$repository_state;
        }

        @Override
        public void set(Notification entity, PropertyState value) {
            entity.$repository_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.RepoConverter())
    .build();

    public static final QueryAttribute<Notification, NotificationSubjectModel> SUBJECT = 
    new AttributeBuilder<Notification, NotificationSubjectModel>("subject", NotificationSubjectModel.class)
    .setProperty(new Property<Notification, NotificationSubjectModel>() {
        @Override
        public NotificationSubjectModel get(Notification entity) {
            return entity.subject;
        }

        @Override
        public void set(Notification entity, NotificationSubjectModel value) {
            entity.subject = value;
        }
    })
    .setPropertyName("subject")
    .setPropertyState(new Property<Notification, PropertyState>() {
        @Override
        public PropertyState get(Notification entity) {
            return entity.$subject_state;
        }

        @Override
        public void set(Notification entity, PropertyState value) {
            entity.$subject_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.NotificationSubjectConverter())
    .build();

    public static final NumericAttribute<Notification, Date> LAST_READ_AT = 
    new AttributeBuilder<Notification, Date>("lastReadAt", Date.class)
    .setProperty(new Property<Notification, Date>() {
        @Override
        public Date get(Notification entity) {
            return entity.lastReadAt;
        }

        @Override
        public void set(Notification entity, Date value) {
            entity.lastReadAt = value;
        }
    })
    .setPropertyName("lastReadAt")
    .setPropertyState(new Property<Notification, PropertyState>() {
        @Override
        public PropertyState get(Notification entity) {
            return entity.$lastReadAt_state;
        }

        @Override
        public void set(Notification entity, PropertyState value) {
            entity.$lastReadAt_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final QueryAttribute<Notification, Boolean> UNREAD = 
    new AttributeBuilder<Notification, Boolean>("unread", boolean.class)
    .setProperty(new BooleanProperty<Notification>() {
        @Override
        public Boolean get(Notification entity) {
            return entity.unread;
        }

        @Override
        public void set(Notification entity, Boolean value) {
            entity.unread = value;
        }

        @Override
        public boolean getBoolean(Notification entity) {
            return entity.unread;
        }

        @Override
        public void setBoolean(Notification entity, boolean value) {
            entity.unread = value;
        }
    })
    .setPropertyName("unread")
    .setPropertyState(new Property<Notification, PropertyState>() {
        @Override
        public PropertyState get(Notification entity) {
            return entity.$unread_state;
        }

        @Override
        public void set(Notification entity, PropertyState value) {
            entity.$unread_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final QueryAttribute<Notification, NotificationReason> REASON = 
    new AttributeBuilder<Notification, NotificationReason>("reason", NotificationReason.class)
    .setProperty(new Property<Notification, NotificationReason>() {
        @Override
        public NotificationReason get(Notification entity) {
            return entity.reason;
        }

        @Override
        public void set(Notification entity, NotificationReason value) {
            entity.reason = value;
        }
    })
    .setPropertyName("reason")
    .setPropertyState(new Property<Notification, PropertyState>() {
        @Override
        public PropertyState get(Notification entity) {
            return entity.$reason_state;
        }

        @Override
        public void set(Notification entity, PropertyState value) {
            entity.$reason_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final StringAttribute<Notification, String> URL = 
    new AttributeBuilder<Notification, String>("url", String.class)
    .setProperty(new Property<Notification, String>() {
        @Override
        public String get(Notification entity) {
            return entity.url;
        }

        @Override
        public void set(Notification entity, String value) {
            entity.url = value;
        }
    })
    .setPropertyName("url")
    .setPropertyState(new Property<Notification, PropertyState>() {
        @Override
        public PropertyState get(Notification entity) {
            return entity.$url_state;
        }

        @Override
        public void set(Notification entity, PropertyState value) {
            entity.$url_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final NumericAttribute<Notification, Date> UPDATED_AT = 
    new AttributeBuilder<Notification, Date>("updatedAt", Date.class)
    .setProperty(new Property<Notification, Date>() {
        @Override
        public Date get(Notification entity) {
            return entity.updatedAt;
        }

        @Override
        public void set(Notification entity, Date value) {
            entity.updatedAt = value;
        }
    })
    .setPropertyName("updatedAt")
    .setPropertyState(new Property<Notification, PropertyState>() {
        @Override
        public PropertyState get(Notification entity) {
            return entity.$updatedAt_state;
        }

        @Override
        public void set(Notification entity, PropertyState value) {
            entity.$updatedAt_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final Type<Notification> $TYPE = new TypeBuilder<Notification>(Notification.class, "Notification")
    .setBaseType(AbstractNotification.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<Notification>() {
        @Override
        public Notification get() {
            return new Notification();
        }
    })
    .setProxyProvider(new Function<Notification, EntityProxy<Notification>>() {
        @Override
        public EntityProxy<Notification> apply(Notification entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(LAST_READ_AT)
    .addAttribute(UNREAD)
    .addAttribute(IS_SUBSCRIBED)
    .addAttribute(SUBJECT)
    .addAttribute(REPOSITORY)
    .addAttribute(UPDATED_AT)
    .addAttribute(ID)
    .addAttribute(REASON)
    .addAttribute(URL)
    .build();

    private PropertyState $isSubscribed_state;

    private PropertyState $id_state;

    private PropertyState $repository_state;

    private PropertyState $subject_state;

    private PropertyState $lastReadAt_state;

    private PropertyState $unread_state;

    private PropertyState $reason_state;

    private PropertyState $url_state;

    private PropertyState $updatedAt_state;

    private final transient EntityProxy<Notification> $proxy = new EntityProxy<Notification>(this, $TYPE);

    protected Notification(Parcel in) {
        super(in);
    }

    public Notification() {
    }

    public boolean isIsSubscribed() {
        return $proxy.get(IS_SUBSCRIBED);
    }

    public void setIsSubscribed(boolean isSubscribed) {
        $proxy.set(IS_SUBSCRIBED, isSubscribed);
    }

    public long getId() {
        return $proxy.get(ID);
    }

    public void setId(long id) {
        $proxy.set(ID, id);
    }

    public Repo getRepository() {
        return $proxy.get(REPOSITORY);
    }

    public void setRepository(Repo repository) {
        $proxy.set(REPOSITORY, repository);
    }

    public NotificationSubjectModel getSubject() {
        return $proxy.get(SUBJECT);
    }

    public void setSubject(NotificationSubjectModel subject) {
        $proxy.set(SUBJECT, subject);
    }

    public Date getLastReadAt() {
        return $proxy.get(LAST_READ_AT);
    }

    public void setLastReadAt(Date lastReadAt) {
        $proxy.set(LAST_READ_AT, lastReadAt);
    }

    public boolean isUnread() {
        return $proxy.get(UNREAD);
    }

    public void setUnread(boolean unread) {
        $proxy.set(UNREAD, unread);
    }

    public NotificationReason getReason() {
        return $proxy.get(REASON);
    }

    public void setReason(NotificationReason reason) {
        $proxy.set(REASON, reason);
    }

    public String getUrl() {
        return $proxy.get(URL);
    }

    public void setUrl(String url) {
        $proxy.set(URL, url);
    }

    public Date getUpdatedAt() {
        return $proxy.get(UPDATED_AT);
    }

    public void setUpdatedAt(Date updatedAt) {
        $proxy.set(UPDATED_AT, updatedAt);
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
