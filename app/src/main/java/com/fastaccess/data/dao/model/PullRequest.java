// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package com.fastaccess.data.dao.model;

import android.os.Parcel;

import com.fastaccess.data.dao.LabelListModel;
import com.fastaccess.data.dao.MilestoneModel;
import com.fastaccess.data.dao.ReactionsModel;
import com.fastaccess.data.dao.UsersListModel;
import com.fastaccess.data.dao.types.IssueState;

import java.util.Date;

import javax.annotation.Generated;

import io.requery.Persistable;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.NumericAttribute;
import io.requery.meta.QueryAttribute;
import io.requery.meta.StringAttribute;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.BooleanProperty;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.IntProperty;
import io.requery.proxy.LongProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;

@Generated("io.requery.processor.EntityProcessor")
public class PullRequest extends AbstractPullRequest implements Persistable {
    public static final NumericAttribute<PullRequest, Long> ID = 
    new AttributeBuilder<PullRequest, Long>("id", long.class)
    .setProperty(new LongProperty<PullRequest>() {
        @Override
        public Long get(PullRequest entity) {
            return entity.id;
        }

        @Override
        public void set(PullRequest entity, Long value) {
            entity.id = value;
        }

        @Override
        public long getLong(PullRequest entity) {
            return entity.id;
        }

        @Override
        public void setLong(PullRequest entity, long value) {
            entity.id = value;
        }
    })
    .setPropertyName("id")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$id_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$id_state = value;
        }
    })
    .setKey(true)
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final QueryAttribute<PullRequest, UsersListModel> ASSIGNEES = 
    new AttributeBuilder<PullRequest, UsersListModel>("assignees", UsersListModel.class)
    .setProperty(new Property<PullRequest, UsersListModel>() {
        @Override
        public UsersListModel get(PullRequest entity) {
            return entity.assignees;
        }

        @Override
        public void set(PullRequest entity, UsersListModel value) {
            entity.assignees = value;
        }
    })
    .setPropertyName("assignees")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$assignees_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$assignees_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UsersConverter())
    .build();

    public static final QueryAttribute<PullRequest, User> MERGED_BY = 
    new AttributeBuilder<PullRequest, User>("mergedBy", User.class)
    .setProperty(new Property<PullRequest, User>() {
        @Override
        public User get(PullRequest entity) {
            return entity.mergedBy;
        }

        @Override
        public void set(PullRequest entity, User value) {
            entity.mergedBy = value;
        }
    })
    .setPropertyName("mergedBy")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$mergedBy_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$mergedBy_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final QueryAttribute<PullRequest, User> CLOSED_BY = 
    new AttributeBuilder<PullRequest, User>("closedBy", User.class)
    .setProperty(new Property<PullRequest, User>() {
        @Override
        public User get(PullRequest entity) {
            return entity.closedBy;
        }

        @Override
        public void set(PullRequest entity, User value) {
            entity.closedBy = value;
        }
    })
    .setPropertyName("closedBy")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$closedBy_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$closedBy_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final QueryAttribute<PullRequest, User> USER = 
    new AttributeBuilder<PullRequest, User>("user_column", User.class)
    .setProperty(new Property<PullRequest, User>() {
        @Override
        public User get(PullRequest entity) {
            return entity.user;
        }

        @Override
        public void set(PullRequest entity, User value) {
            entity.user = value;
        }
    })
    .setPropertyName("user")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$user_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$user_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final QueryAttribute<PullRequest, User> ASSIGNEE = 
    new AttributeBuilder<PullRequest, User>("assignee", User.class)
    .setProperty(new Property<PullRequest, User>() {
        @Override
        public User get(PullRequest entity) {
            return entity.assignee;
        }

        @Override
        public void set(PullRequest entity, User value) {
            entity.assignee = value;
        }
    })
    .setPropertyName("assignee")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$assignee_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$assignee_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final QueryAttribute<PullRequest, LabelListModel> LABELS = 
    new AttributeBuilder<PullRequest, LabelListModel>("labels", LabelListModel.class)
    .setProperty(new Property<PullRequest, LabelListModel>() {
        @Override
        public LabelListModel get(PullRequest entity) {
            return entity.labels;
        }

        @Override
        public void set(PullRequest entity, LabelListModel value) {
            entity.labels = value;
        }
    })
    .setPropertyName("labels")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$labels_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$labels_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.LabelsListConverter())
    .build();

    public static final QueryAttribute<PullRequest, MilestoneModel> MILESTONE = 
    new AttributeBuilder<PullRequest, MilestoneModel>("milestone", MilestoneModel.class)
    .setProperty(new Property<PullRequest, MilestoneModel>() {
        @Override
        public MilestoneModel get(PullRequest entity) {
            return entity.milestone;
        }

        @Override
        public void set(PullRequest entity, MilestoneModel value) {
            entity.milestone = value;
        }
    })
    .setPropertyName("milestone")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$milestone_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$milestone_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.MilestoneConverter())
    .build();

    public static final QueryAttribute<PullRequest, Commit> BASE = 
    new AttributeBuilder<PullRequest, Commit>("base", Commit.class)
    .setProperty(new Property<PullRequest, Commit>() {
        @Override
        public Commit get(PullRequest entity) {
            return entity.base;
        }

        @Override
        public void set(PullRequest entity, Commit value) {
            entity.base = value;
        }
    })
    .setPropertyName("base")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$base_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$base_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.CommitConverter())
    .build();

    public static final QueryAttribute<PullRequest, Commit> HEAD = 
    new AttributeBuilder<PullRequest, Commit>("head", Commit.class)
    .setProperty(new Property<PullRequest, Commit>() {
        @Override
        public Commit get(PullRequest entity) {
            return entity.head;
        }

        @Override
        public void set(PullRequest entity, Commit value) {
            entity.head = value;
        }
    })
    .setPropertyName("head")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$head_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$head_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.CommitConverter())
    .build();

    public static final QueryAttribute<PullRequest, PullRequest> PULL_REQUEST = 
    new AttributeBuilder<PullRequest, PullRequest>("pullRequest", PullRequest.class)
    .setProperty(new Property<PullRequest, PullRequest>() {
        @Override
        public PullRequest get(PullRequest entity) {
            return entity.pullRequest;
        }

        @Override
        public void set(PullRequest entity, PullRequest value) {
            entity.pullRequest = value;
        }
    })
    .setPropertyName("pullRequest")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$pullRequest_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$pullRequest_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.PullRequestConverter())
    .build();

    public static final QueryAttribute<PullRequest, ReactionsModel> REACTIONS = 
    new AttributeBuilder<PullRequest, ReactionsModel>("reactions", ReactionsModel.class)
    .setProperty(new Property<PullRequest, ReactionsModel>() {
        @Override
        public ReactionsModel get(PullRequest entity) {
            return entity.reactions;
        }

        @Override
        public void set(PullRequest entity, ReactionsModel value) {
            entity.reactions = value;
        }
    })
    .setPropertyName("reactions")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$reactions_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$reactions_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.ReactionsConverter())
    .build();

    public static final StringAttribute<PullRequest, String> LOGIN = 
    new AttributeBuilder<PullRequest, String>("login", String.class)
    .setProperty(new Property<PullRequest, String>() {
        @Override
        public String get(PullRequest entity) {
            return entity.login;
        }

        @Override
        public void set(PullRequest entity, String value) {
            entity.login = value;
        }
    })
    .setPropertyName("login")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$login_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$login_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<PullRequest, String> MERGE_COMMIT_SHA = 
    new AttributeBuilder<PullRequest, String>("mergeCommitSha", String.class)
    .setProperty(new Property<PullRequest, String>() {
        @Override
        public String get(PullRequest entity) {
            return entity.mergeCommitSha;
        }

        @Override
        public void set(PullRequest entity, String value) {
            entity.mergeCommitSha = value;
        }
    })
    .setPropertyName("mergeCommitSha")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$mergeCommitSha_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$mergeCommitSha_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final NumericAttribute<PullRequest, Integer> COMMENTS = 
    new AttributeBuilder<PullRequest, Integer>("comments", int.class)
    .setProperty(new IntProperty<PullRequest>() {
        @Override
        public Integer get(PullRequest entity) {
            return entity.comments;
        }

        @Override
        public void set(PullRequest entity, Integer value) {
            entity.comments = value;
        }

        @Override
        public int getInt(PullRequest entity) {
            return entity.comments;
        }

        @Override
        public void setInt(PullRequest entity, int value) {
            entity.comments = value;
        }
    })
    .setPropertyName("comments")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$comments_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$comments_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final QueryAttribute<PullRequest, Boolean> LOCKED = 
    new AttributeBuilder<PullRequest, Boolean>("locked", boolean.class)
    .setProperty(new BooleanProperty<PullRequest>() {
        @Override
        public Boolean get(PullRequest entity) {
            return entity.locked;
        }

        @Override
        public void set(PullRequest entity, Boolean value) {
            entity.locked = value;
        }

        @Override
        public boolean getBoolean(PullRequest entity) {
            return entity.locked;
        }

        @Override
        public void setBoolean(PullRequest entity, boolean value) {
            entity.locked = value;
        }
    })
    .setPropertyName("locked")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$locked_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$locked_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final StringAttribute<PullRequest, String> BODY_HTML = 
    new AttributeBuilder<PullRequest, String>("bodyHtml", String.class)
    .setProperty(new Property<PullRequest, String>() {
        @Override
        public String get(PullRequest entity) {
            return entity.bodyHtml;
        }

        @Override
        public void set(PullRequest entity, String value) {
            entity.bodyHtml = value;
        }
    })
    .setPropertyName("bodyHtml")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$bodyHtml_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$bodyHtml_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final NumericAttribute<PullRequest, Integer> ADDITIONS = 
    new AttributeBuilder<PullRequest, Integer>("additions", int.class)
    .setProperty(new IntProperty<PullRequest>() {
        @Override
        public Integer get(PullRequest entity) {
            return entity.additions;
        }

        @Override
        public void set(PullRequest entity, Integer value) {
            entity.additions = value;
        }

        @Override
        public int getInt(PullRequest entity) {
            return entity.additions;
        }

        @Override
        public void setInt(PullRequest entity, int value) {
            entity.additions = value;
        }
    })
    .setPropertyName("additions")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$additions_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$additions_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final NumericAttribute<PullRequest, Integer> DELETIONS = 
    new AttributeBuilder<PullRequest, Integer>("deletions", int.class)
    .setProperty(new IntProperty<PullRequest>() {
        @Override
        public Integer get(PullRequest entity) {
            return entity.deletions;
        }

        @Override
        public void set(PullRequest entity, Integer value) {
            entity.deletions = value;
        }

        @Override
        public int getInt(PullRequest entity) {
            return entity.deletions;
        }

        @Override
        public void setInt(PullRequest entity, int value) {
            entity.deletions = value;
        }
    })
    .setPropertyName("deletions")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$deletions_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$deletions_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final StringAttribute<PullRequest, String> HTML_URL = 
    new AttributeBuilder<PullRequest, String>("htmlUrl", String.class)
    .setProperty(new Property<PullRequest, String>() {
        @Override
        public String get(PullRequest entity) {
            return entity.htmlUrl;
        }

        @Override
        public void set(PullRequest entity, String value) {
            entity.htmlUrl = value;
        }
    })
    .setPropertyName("htmlUrl")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$htmlUrl_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$htmlUrl_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<PullRequest, String> DIFF_URL = 
    new AttributeBuilder<PullRequest, String>("diffUrl", String.class)
    .setProperty(new Property<PullRequest, String>() {
        @Override
        public String get(PullRequest entity) {
            return entity.diffUrl;
        }

        @Override
        public void set(PullRequest entity, String value) {
            entity.diffUrl = value;
        }
    })
    .setPropertyName("diffUrl")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$diffUrl_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$diffUrl_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<PullRequest, String> REPO_ID = 
    new AttributeBuilder<PullRequest, String>("repoId", String.class)
    .setProperty(new Property<PullRequest, String>() {
        @Override
        public String get(PullRequest entity) {
            return entity.repoId;
        }

        @Override
        public void set(PullRequest entity, String value) {
            entity.repoId = value;
        }
    })
    .setPropertyName("repoId")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$repoId_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$repoId_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final NumericAttribute<PullRequest, Integer> REVIEW_COMMENTS = 
    new AttributeBuilder<PullRequest, Integer>("reviewComments", int.class)
    .setProperty(new IntProperty<PullRequest>() {
        @Override
        public Integer get(PullRequest entity) {
            return entity.reviewComments;
        }

        @Override
        public void set(PullRequest entity, Integer value) {
            entity.reviewComments = value;
        }

        @Override
        public int getInt(PullRequest entity) {
            return entity.reviewComments;
        }

        @Override
        public void setInt(PullRequest entity, int value) {
            entity.reviewComments = value;
        }
    })
    .setPropertyName("reviewComments")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$reviewComments_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$reviewComments_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final StringAttribute<PullRequest, String> MERGE_STATE = 
    new AttributeBuilder<PullRequest, String>("mergeState", String.class)
    .setProperty(new Property<PullRequest, String>() {
        @Override
        public String get(PullRequest entity) {
            return entity.mergeState;
        }

        @Override
        public void set(PullRequest entity, String value) {
            entity.mergeState = value;
        }
    })
    .setPropertyName("mergeState")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$mergeState_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$mergeState_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<PullRequest, String> URL = 
    new AttributeBuilder<PullRequest, String>("url", String.class)
    .setProperty(new Property<PullRequest, String>() {
        @Override
        public String get(PullRequest entity) {
            return entity.url;
        }

        @Override
        public void set(PullRequest entity, String value) {
            entity.url = value;
        }
    })
    .setPropertyName("url")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$url_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$url_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<PullRequest, String> MERGEABLE_STATE = 
    new AttributeBuilder<PullRequest, String>("mergeableState", String.class)
    .setProperty(new Property<PullRequest, String>() {
        @Override
        public String get(PullRequest entity) {
            return entity.mergeableState;
        }

        @Override
        public void set(PullRequest entity, String value) {
            entity.mergeableState = value;
        }
    })
    .setPropertyName("mergeableState")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$mergeableState_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$mergeableState_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final NumericAttribute<PullRequest, Date> CLOSED_AT = 
    new AttributeBuilder<PullRequest, Date>("closedAt", Date.class)
    .setProperty(new Property<PullRequest, Date>() {
        @Override
        public Date get(PullRequest entity) {
            return entity.closedAt;
        }

        @Override
        public void set(PullRequest entity, Date value) {
            entity.closedAt = value;
        }
    })
    .setPropertyName("closedAt")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$closedAt_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$closedAt_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final NumericAttribute<PullRequest, Integer> NUMBER = 
    new AttributeBuilder<PullRequest, Integer>("number", int.class)
    .setProperty(new IntProperty<PullRequest>() {
        @Override
        public Integer get(PullRequest entity) {
            return entity.number;
        }

        @Override
        public void set(PullRequest entity, Integer value) {
            entity.number = value;
        }

        @Override
        public int getInt(PullRequest entity) {
            return entity.number;
        }

        @Override
        public void setInt(PullRequest entity, int value) {
            entity.number = value;
        }
    })
    .setPropertyName("number")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$number_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$number_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final NumericAttribute<PullRequest, Integer> COMMITS = 
    new AttributeBuilder<PullRequest, Integer>("commits", int.class)
    .setProperty(new IntProperty<PullRequest>() {
        @Override
        public Integer get(PullRequest entity) {
            return entity.commits;
        }

        @Override
        public void set(PullRequest entity, Integer value) {
            entity.commits = value;
        }

        @Override
        public int getInt(PullRequest entity) {
            return entity.commits;
        }

        @Override
        public void setInt(PullRequest entity, int value) {
            entity.commits = value;
        }
    })
    .setPropertyName("commits")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$commits_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$commits_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final QueryAttribute<PullRequest, Boolean> MERGABLE = 
    new AttributeBuilder<PullRequest, Boolean>("mergable", boolean.class)
    .setProperty(new BooleanProperty<PullRequest>() {
        @Override
        public Boolean get(PullRequest entity) {
            return entity.mergable;
        }

        @Override
        public void set(PullRequest entity, Boolean value) {
            entity.mergable = value;
        }

        @Override
        public boolean getBoolean(PullRequest entity) {
            return entity.mergable;
        }

        @Override
        public void setBoolean(PullRequest entity, boolean value) {
            entity.mergable = value;
        }
    })
    .setPropertyName("mergable")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$mergable_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$mergable_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final QueryAttribute<PullRequest, Boolean> MERGED = 
    new AttributeBuilder<PullRequest, Boolean>("merged", boolean.class)
    .setProperty(new BooleanProperty<PullRequest>() {
        @Override
        public Boolean get(PullRequest entity) {
            return entity.merged;
        }

        @Override
        public void set(PullRequest entity, Boolean value) {
            entity.merged = value;
        }

        @Override
        public boolean getBoolean(PullRequest entity) {
            return entity.merged;
        }

        @Override
        public void setBoolean(PullRequest entity, boolean value) {
            entity.merged = value;
        }
    })
    .setPropertyName("merged")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$merged_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$merged_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final NumericAttribute<PullRequest, Date> UPDATED_AT = 
    new AttributeBuilder<PullRequest, Date>("updatedAt", Date.class)
    .setProperty(new Property<PullRequest, Date>() {
        @Override
        public Date get(PullRequest entity) {
            return entity.updatedAt;
        }

        @Override
        public void set(PullRequest entity, Date value) {
            entity.updatedAt = value;
        }
    })
    .setPropertyName("updatedAt")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$updatedAt_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$updatedAt_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final QueryAttribute<PullRequest, IssueState> STATE = 
    new AttributeBuilder<PullRequest, IssueState>("state", IssueState.class)
    .setProperty(new Property<PullRequest, IssueState>() {
        @Override
        public IssueState get(PullRequest entity) {
            return entity.state;
        }

        @Override
        public void set(PullRequest entity, IssueState value) {
            entity.state = value;
        }
    })
    .setPropertyName("state")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$state_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$state_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final NumericAttribute<PullRequest, Integer> CHANGED_FILES = 
    new AttributeBuilder<PullRequest, Integer>("changedFiles", int.class)
    .setProperty(new IntProperty<PullRequest>() {
        @Override
        public Integer get(PullRequest entity) {
            return entity.changedFiles;
        }

        @Override
        public void set(PullRequest entity, Integer value) {
            entity.changedFiles = value;
        }

        @Override
        public int getInt(PullRequest entity) {
            return entity.changedFiles;
        }

        @Override
        public void setInt(PullRequest entity, int value) {
            entity.changedFiles = value;
        }
    })
    .setPropertyName("changedFiles")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$changedFiles_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$changedFiles_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final StringAttribute<PullRequest, String> PATCH_URL = 
    new AttributeBuilder<PullRequest, String>("patchUrl", String.class)
    .setProperty(new Property<PullRequest, String>() {
        @Override
        public String get(PullRequest entity) {
            return entity.patchUrl;
        }

        @Override
        public void set(PullRequest entity, String value) {
            entity.patchUrl = value;
        }
    })
    .setPropertyName("patchUrl")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$patchUrl_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$patchUrl_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<PullRequest, String> BODY = 
    new AttributeBuilder<PullRequest, String>("body", String.class)
    .setProperty(new Property<PullRequest, String>() {
        @Override
        public String get(PullRequest entity) {
            return entity.body;
        }

        @Override
        public void set(PullRequest entity, String value) {
            entity.body = value;
        }
    })
    .setPropertyName("body")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$body_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$body_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<PullRequest, String> TITLE = 
    new AttributeBuilder<PullRequest, String>("title", String.class)
    .setProperty(new Property<PullRequest, String>() {
        @Override
        public String get(PullRequest entity) {
            return entity.title;
        }

        @Override
        public void set(PullRequest entity, String value) {
            entity.title = value;
        }
    })
    .setPropertyName("title")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$title_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$title_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final QueryAttribute<PullRequest, Boolean> MERGEABLE = 
    new AttributeBuilder<PullRequest, Boolean>("mergeable", boolean.class)
    .setProperty(new BooleanProperty<PullRequest>() {
        @Override
        public Boolean get(PullRequest entity) {
            return entity.mergeable;
        }

        @Override
        public void set(PullRequest entity, Boolean value) {
            entity.mergeable = value;
        }

        @Override
        public boolean getBoolean(PullRequest entity) {
            return entity.mergeable;
        }

        @Override
        public void setBoolean(PullRequest entity, boolean value) {
            entity.mergeable = value;
        }
    })
    .setPropertyName("mergeable")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$mergeable_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$mergeable_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final NumericAttribute<PullRequest, Date> MERGED_AT = 
    new AttributeBuilder<PullRequest, Date>("mergedAt", Date.class)
    .setProperty(new Property<PullRequest, Date>() {
        @Override
        public Date get(PullRequest entity) {
            return entity.mergedAt;
        }

        @Override
        public void set(PullRequest entity, Date value) {
            entity.mergedAt = value;
        }
    })
    .setPropertyName("mergedAt")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$mergedAt_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$mergedAt_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final NumericAttribute<PullRequest, Date> CREATED_AT = 
    new AttributeBuilder<PullRequest, Date>("createdAt", Date.class)
    .setProperty(new Property<PullRequest, Date>() {
        @Override
        public Date get(PullRequest entity) {
            return entity.createdAt;
        }

        @Override
        public void set(PullRequest entity, Date value) {
            entity.createdAt = value;
        }
    })
    .setPropertyName("createdAt")
    .setPropertyState(new Property<PullRequest, PropertyState>() {
        @Override
        public PropertyState get(PullRequest entity) {
            return entity.$createdAt_state;
        }

        @Override
        public void set(PullRequest entity, PropertyState value) {
            entity.$createdAt_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final Type<PullRequest> $TYPE = new TypeBuilder<PullRequest>(PullRequest.class, "PullRequest")
    .setBaseType(AbstractPullRequest.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<PullRequest>() {
        @Override
        public PullRequest get() {
            return new PullRequest();
        }
    })
    .setProxyProvider(new Function<PullRequest, EntityProxy<PullRequest>>() {
        @Override
        public EntityProxy<PullRequest> apply(PullRequest entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(ASSIGNEES)
    .addAttribute(HEAD)
    .addAttribute(REPO_ID)
    .addAttribute(REVIEW_COMMENTS)
    .addAttribute(CREATED_AT)
    .addAttribute(COMMENTS)
    .addAttribute(STATE)
    .addAttribute(MERGEABLE_STATE)
    .addAttribute(MILESTONE)
    .addAttribute(COMMITS)
    .addAttribute(PULL_REQUEST)
    .addAttribute(URL)
    .addAttribute(BASE)
    .addAttribute(MERGED_BY)
    .addAttribute(ASSIGNEE)
    .addAttribute(CLOSED_BY)
    .addAttribute(MERGE_COMMIT_SHA)
    .addAttribute(LOGIN)
    .addAttribute(UPDATED_AT)
    .addAttribute(ID)
    .addAttribute(HTML_URL)
    .addAttribute(MERGABLE)
    .addAttribute(LABELS)
    .addAttribute(MERGE_STATE)
    .addAttribute(REACTIONS)
    .addAttribute(NUMBER)
    .addAttribute(LOCKED)
    .addAttribute(DIFF_URL)
    .addAttribute(PATCH_URL)
    .addAttribute(MERGEABLE)
    .addAttribute(USER)
    .addAttribute(BODY_HTML)
    .addAttribute(CHANGED_FILES)
    .addAttribute(TITLE)
    .addAttribute(CLOSED_AT)
    .addAttribute(MERGED)
    .addAttribute(ADDITIONS)
    .addAttribute(MERGED_AT)
    .addAttribute(DELETIONS)
    .addAttribute(BODY)
    .build();

    private PropertyState $id_state;

    private PropertyState $assignees_state;

    private PropertyState $mergedBy_state;

    private PropertyState $closedBy_state;

    private PropertyState $user_state;

    private PropertyState $assignee_state;

    private PropertyState $labels_state;

    private PropertyState $milestone_state;

    private PropertyState $base_state;

    private PropertyState $head_state;

    private PropertyState $pullRequest_state;

    private PropertyState $reactions_state;

    private PropertyState $login_state;

    private PropertyState $mergeCommitSha_state;

    private PropertyState $comments_state;

    private PropertyState $locked_state;

    private PropertyState $bodyHtml_state;

    private PropertyState $additions_state;

    private PropertyState $deletions_state;

    private PropertyState $htmlUrl_state;

    private PropertyState $diffUrl_state;

    private PropertyState $repoId_state;

    private PropertyState $reviewComments_state;

    private PropertyState $mergeState_state;

    private PropertyState $url_state;

    private PropertyState $mergeableState_state;

    private PropertyState $closedAt_state;

    private PropertyState $number_state;

    private PropertyState $commits_state;

    private PropertyState $mergable_state;

    private PropertyState $merged_state;

    private PropertyState $updatedAt_state;

    private PropertyState $state_state;

    private PropertyState $changedFiles_state;

    private PropertyState $patchUrl_state;

    private PropertyState $body_state;

    private PropertyState $title_state;

    private PropertyState $mergeable_state;

    private PropertyState $mergedAt_state;

    private PropertyState $createdAt_state;

    private final transient EntityProxy<PullRequest> $proxy = new EntityProxy<PullRequest>(this, $TYPE);

    protected PullRequest(Parcel in) {
        super(in);
    }

    public PullRequest() {
    }

    public long getId() {
        return $proxy.get(ID);
    }

    public void setId(long id) {
        $proxy.set(ID, id);
    }

    public UsersListModel getAssignees() {
        return $proxy.get(ASSIGNEES);
    }

    public void setAssignees(UsersListModel assignees) {
        $proxy.set(ASSIGNEES, assignees);
    }

    public User getMergedBy() {
        return $proxy.get(MERGED_BY);
    }

    public void setMergedBy(User mergedBy) {
        $proxy.set(MERGED_BY, mergedBy);
    }

    public User getClosedBy() {
        return $proxy.get(CLOSED_BY);
    }

    public void setClosedBy(User closedBy) {
        $proxy.set(CLOSED_BY, closedBy);
    }

    public User getUser() {
        return $proxy.get(USER);
    }

    public void setUser(User user) {
        $proxy.set(USER, user);
    }

    public User getAssignee() {
        return $proxy.get(ASSIGNEE);
    }

    public void setAssignee(User assignee) {
        $proxy.set(ASSIGNEE, assignee);
    }

    public LabelListModel getLabels() {
        return $proxy.get(LABELS);
    }

    public void setLabels(LabelListModel labels) {
        $proxy.set(LABELS, labels);
    }

    public MilestoneModel getMilestone() {
        return $proxy.get(MILESTONE);
    }

    public void setMilestone(MilestoneModel milestone) {
        $proxy.set(MILESTONE, milestone);
    }

    public Commit getBase() {
        return $proxy.get(BASE);
    }

    public void setBase(Commit base) {
        $proxy.set(BASE, base);
    }

    public Commit getHead() {
        return $proxy.get(HEAD);
    }

    public void setHead(Commit head) {
        $proxy.set(HEAD, head);
    }

    public PullRequest getPullRequest() {
        return $proxy.get(PULL_REQUEST);
    }

    public void setPullRequest(PullRequest pullRequest) {
        $proxy.set(PULL_REQUEST, pullRequest);
    }

    public ReactionsModel getReactions() {
        return $proxy.get(REACTIONS);
    }

    public void setReactions(ReactionsModel reactions) {
        $proxy.set(REACTIONS, reactions);
    }

    public String getLogin() {
        return $proxy.get(LOGIN);
    }

    public void setLogin(String login) {
        $proxy.set(LOGIN, login);
    }

    public String getMergeCommitSha() {
        return $proxy.get(MERGE_COMMIT_SHA);
    }

    public void setMergeCommitSha(String mergeCommitSha) {
        $proxy.set(MERGE_COMMIT_SHA, mergeCommitSha);
    }

    public int getComments() {
        return $proxy.get(COMMENTS);
    }

    public void setComments(int comments) {
        $proxy.set(COMMENTS, comments);
    }

    public boolean isLocked() {
        return $proxy.get(LOCKED);
    }

    public void setLocked(boolean locked) {
        $proxy.set(LOCKED, locked);
    }

    public String getBodyHtml() {
        return $proxy.get(BODY_HTML);
    }

    public void setBodyHtml(String bodyHtml) {
        $proxy.set(BODY_HTML, bodyHtml);
    }

    public int getAdditions() {
        return $proxy.get(ADDITIONS);
    }

    public void setAdditions(int additions) {
        $proxy.set(ADDITIONS, additions);
    }

    public int getDeletions() {
        return $proxy.get(DELETIONS);
    }

    public void setDeletions(int deletions) {
        $proxy.set(DELETIONS, deletions);
    }

    public String getHtmlUrl() {
        return $proxy.get(HTML_URL);
    }

    public void setHtmlUrl(String htmlUrl) {
        $proxy.set(HTML_URL, htmlUrl);
    }

    public String getDiffUrl() {
        return $proxy.get(DIFF_URL);
    }

    public void setDiffUrl(String diffUrl) {
        $proxy.set(DIFF_URL, diffUrl);
    }

    public String getRepoId() {
        return $proxy.get(REPO_ID);
    }

    public void setRepoId(String repoId) {
        $proxy.set(REPO_ID, repoId);
    }

    public int getReviewComments() {
        return $proxy.get(REVIEW_COMMENTS);
    }

    public void setReviewComments(int reviewComments) {
        $proxy.set(REVIEW_COMMENTS, reviewComments);
    }

    public String getMergeState() {
        return $proxy.get(MERGE_STATE);
    }

    public void setMergeState(String mergeState) {
        $proxy.set(MERGE_STATE, mergeState);
    }

    public String getUrl() {
        return $proxy.get(URL);
    }

    public void setUrl(String url) {
        $proxy.set(URL, url);
    }

    public String getMergeableState() {
        return $proxy.get(MERGEABLE_STATE);
    }

    public void setMergeableState(String mergeableState) {
        $proxy.set(MERGEABLE_STATE, mergeableState);
    }

    public Date getClosedAt() {
        return $proxy.get(CLOSED_AT);
    }

    public void setClosedAt(Date closedAt) {
        $proxy.set(CLOSED_AT, closedAt);
    }

    public int getNumber() {
        return $proxy.get(NUMBER);
    }

    public void setNumber(int number) {
        $proxy.set(NUMBER, number);
    }

    public int getCommits() {
        return $proxy.get(COMMITS);
    }

    public void setCommits(int commits) {
        $proxy.set(COMMITS, commits);
    }

    public boolean isMergable() {
        return $proxy.get(MERGABLE);
    }

    public void setMergable(boolean mergable) {
        $proxy.set(MERGABLE, mergable);
    }

    public boolean isMerged() {
        return $proxy.get(MERGED);
    }

    public void setMerged(boolean merged) {
        $proxy.set(MERGED, merged);
    }

    public Date getUpdatedAt() {
        return $proxy.get(UPDATED_AT);
    }

    public void setUpdatedAt(Date updatedAt) {
        $proxy.set(UPDATED_AT, updatedAt);
    }

    public IssueState getState() {
        return $proxy.get(STATE);
    }

    public void setState(IssueState state) {
        $proxy.set(STATE, state);
    }

    public int getChangedFiles() {
        return $proxy.get(CHANGED_FILES);
    }

    public void setChangedFiles(int changedFiles) {
        $proxy.set(CHANGED_FILES, changedFiles);
    }

    public String getPatchUrl() {
        return $proxy.get(PATCH_URL);
    }

    public void setPatchUrl(String patchUrl) {
        $proxy.set(PATCH_URL, patchUrl);
    }

    public String getBody() {
        return $proxy.get(BODY);
    }

    public void setBody(String body) {
        $proxy.set(BODY, body);
    }

    public String getTitle() {
        return $proxy.get(TITLE);
    }

    public void setTitle(String title) {
        $proxy.set(TITLE, title);
    }

    public boolean isMergeable() {
        return $proxy.get(MERGEABLE);
    }

    public void setMergeable(boolean mergeable) {
        $proxy.set(MERGEABLE, mergeable);
    }

    public Date getMergedAt() {
        return $proxy.get(MERGED_AT);
    }

    public void setMergedAt(Date mergedAt) {
        $proxy.set(MERGED_AT, mergedAt);
    }

    public Date getCreatedAt() {
        return $proxy.get(CREATED_AT);
    }

    public void setCreatedAt(Date createdAt) {
        $proxy.set(CREATED_AT, createdAt);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof PullRequest && ((PullRequest)obj).$proxy.equals(this.$proxy);
    }

    @Override
    public int hashCode() {
        return $proxy.hashCode();
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
