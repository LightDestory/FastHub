// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package com.fastaccess.data.dao.model;

import android.os.Parcel;

import com.fastaccess.data.dao.LabelListModel;
import com.fastaccess.data.dao.MilestoneModel;
import com.fastaccess.data.dao.ReactionsModel;
import com.fastaccess.data.dao.UsersListModel;
import com.fastaccess.data.dao.types.IssueState;

import java.util.Date;

import javax.annotation.Generated;

import io.requery.Persistable;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.NumericAttribute;
import io.requery.meta.QueryAttribute;
import io.requery.meta.StringAttribute;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.BooleanProperty;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.IntProperty;
import io.requery.proxy.LongProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;

@Generated("io.requery.processor.EntityProcessor")
public class Issue extends AbstractIssue implements Persistable {
    public static final NumericAttribute<Issue, Long> ID = 
    new AttributeBuilder<Issue, Long>("id", long.class)
    .setProperty(new LongProperty<Issue>() {
        @Override
        public Long get(Issue entity) {
            return entity.id;
        }

        @Override
        public void set(Issue entity, Long value) {
            entity.id = value;
        }

        @Override
        public long getLong(Issue entity) {
            return entity.id;
        }

        @Override
        public void setLong(Issue entity, long value) {
            entity.id = value;
        }
    })
    .setPropertyName("id")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$id_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$id_state = value;
        }
    })
    .setKey(true)
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final QueryAttribute<Issue, User> USER = 
    new AttributeBuilder<Issue, User>("user_column", User.class)
    .setProperty(new Property<Issue, User>() {
        @Override
        public User get(Issue entity) {
            return entity.user;
        }

        @Override
        public void set(Issue entity, User value) {
            entity.user = value;
        }
    })
    .setPropertyName("user")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$user_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$user_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final QueryAttribute<Issue, User> ASSIGNEE = 
    new AttributeBuilder<Issue, User>("assignee", User.class)
    .setProperty(new Property<Issue, User>() {
        @Override
        public User get(Issue entity) {
            return entity.assignee;
        }

        @Override
        public void set(Issue entity, User value) {
            entity.assignee = value;
        }
    })
    .setPropertyName("assignee")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$assignee_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$assignee_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final QueryAttribute<Issue, UsersListModel> ASSIGNEES = 
    new AttributeBuilder<Issue, UsersListModel>("assignees", UsersListModel.class)
    .setProperty(new Property<Issue, UsersListModel>() {
        @Override
        public UsersListModel get(Issue entity) {
            return entity.assignees;
        }

        @Override
        public void set(Issue entity, UsersListModel value) {
            entity.assignees = value;
        }
    })
    .setPropertyName("assignees")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$assignees_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$assignees_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UsersConverter())
    .build();

    public static final QueryAttribute<Issue, LabelListModel> LABELS = 
    new AttributeBuilder<Issue, LabelListModel>("labels", LabelListModel.class)
    .setProperty(new Property<Issue, LabelListModel>() {
        @Override
        public LabelListModel get(Issue entity) {
            return entity.labels;
        }

        @Override
        public void set(Issue entity, LabelListModel value) {
            entity.labels = value;
        }
    })
    .setPropertyName("labels")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$labels_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$labels_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.LabelsListConverter())
    .build();

    public static final QueryAttribute<Issue, MilestoneModel> MILESTONE = 
    new AttributeBuilder<Issue, MilestoneModel>("milestone", MilestoneModel.class)
    .setProperty(new Property<Issue, MilestoneModel>() {
        @Override
        public MilestoneModel get(Issue entity) {
            return entity.milestone;
        }

        @Override
        public void set(Issue entity, MilestoneModel value) {
            entity.milestone = value;
        }
    })
    .setPropertyName("milestone")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$milestone_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$milestone_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.MilestoneConverter())
    .build();

    public static final QueryAttribute<Issue, Repo> REPOSITORY = 
    new AttributeBuilder<Issue, Repo>("repository", Repo.class)
    .setProperty(new Property<Issue, Repo>() {
        @Override
        public Repo get(Issue entity) {
            return entity.repository;
        }

        @Override
        public void set(Issue entity, Repo value) {
            entity.repository = value;
        }
    })
    .setPropertyName("repository")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$repository_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$repository_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.RepoConverter())
    .build();

    public static final QueryAttribute<Issue, PullRequest> PULL_REQUEST = 
    new AttributeBuilder<Issue, PullRequest>("pullRequest", PullRequest.class)
    .setProperty(new Property<Issue, PullRequest>() {
        @Override
        public PullRequest get(Issue entity) {
            return entity.pullRequest;
        }

        @Override
        public void set(Issue entity, PullRequest value) {
            entity.pullRequest = value;
        }
    })
    .setPropertyName("pullRequest")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$pullRequest_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$pullRequest_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.PullRequestConverter())
    .build();

    public static final QueryAttribute<Issue, User> CLOSED_BY = 
    new AttributeBuilder<Issue, User>("closedBy", User.class)
    .setProperty(new Property<Issue, User>() {
        @Override
        public User get(Issue entity) {
            return entity.closedBy;
        }

        @Override
        public void set(Issue entity, User value) {
            entity.closedBy = value;
        }
    })
    .setPropertyName("closedBy")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$closedBy_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$closedBy_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final QueryAttribute<Issue, ReactionsModel> REACTIONS = 
    new AttributeBuilder<Issue, ReactionsModel>("reactions", ReactionsModel.class)
    .setProperty(new Property<Issue, ReactionsModel>() {
        @Override
        public ReactionsModel get(Issue entity) {
            return entity.reactions;
        }

        @Override
        public void set(Issue entity, ReactionsModel value) {
            entity.reactions = value;
        }
    })
    .setPropertyName("reactions")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$reactions_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$reactions_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.ReactionsConverter())
    .build();

    public static final StringAttribute<Issue, String> TITLE = 
    new AttributeBuilder<Issue, String>("title", String.class)
    .setProperty(new Property<Issue, String>() {
        @Override
        public String get(Issue entity) {
            return entity.title;
        }

        @Override
        public void set(Issue entity, String value) {
            entity.title = value;
        }
    })
    .setPropertyName("title")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$title_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$title_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Issue, String> URL = 
    new AttributeBuilder<Issue, String>("url", String.class)
    .setProperty(new Property<Issue, String>() {
        @Override
        public String get(Issue entity) {
            return entity.url;
        }

        @Override
        public void set(Issue entity, String value) {
            entity.url = value;
        }
    })
    .setPropertyName("url")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$url_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$url_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Issue, String> REPO_ID = 
    new AttributeBuilder<Issue, String>("repoId", String.class)
    .setProperty(new Property<Issue, String>() {
        @Override
        public String get(Issue entity) {
            return entity.repoId;
        }

        @Override
        public void set(Issue entity, String value) {
            entity.repoId = value;
        }
    })
    .setPropertyName("repoId")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$repoId_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$repoId_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Issue, String> BODY = 
    new AttributeBuilder<Issue, String>("body", String.class)
    .setProperty(new Property<Issue, String>() {
        @Override
        public String get(Issue entity) {
            return entity.body;
        }

        @Override
        public void set(Issue entity, String value) {
            entity.body = value;
        }
    })
    .setPropertyName("body")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$body_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$body_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final NumericAttribute<Issue, Date> UPDATED_AT = 
    new AttributeBuilder<Issue, Date>("updatedAt", Date.class)
    .setProperty(new Property<Issue, Date>() {
        @Override
        public Date get(Issue entity) {
            return entity.updatedAt;
        }

        @Override
        public void set(Issue entity, Date value) {
            entity.updatedAt = value;
        }
    })
    .setPropertyName("updatedAt")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$updatedAt_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$updatedAt_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final StringAttribute<Issue, String> BODY_HTML = 
    new AttributeBuilder<Issue, String>("bodyHtml", String.class)
    .setProperty(new Property<Issue, String>() {
        @Override
        public String get(Issue entity) {
            return entity.bodyHtml;
        }

        @Override
        public void set(Issue entity, String value) {
            entity.bodyHtml = value;
        }
    })
    .setPropertyName("bodyHtml")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$bodyHtml_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$bodyHtml_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final NumericAttribute<Issue, Integer> NUMBER = 
    new AttributeBuilder<Issue, Integer>("number", int.class)
    .setProperty(new IntProperty<Issue>() {
        @Override
        public Integer get(Issue entity) {
            return entity.number;
        }

        @Override
        public void set(Issue entity, Integer value) {
            entity.number = value;
        }

        @Override
        public int getInt(Issue entity) {
            return entity.number;
        }

        @Override
        public void setInt(Issue entity, int value) {
            entity.number = value;
        }
    })
    .setPropertyName("number")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$number_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$number_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final StringAttribute<Issue, String> LOGIN = 
    new AttributeBuilder<Issue, String>("login", String.class)
    .setProperty(new Property<Issue, String>() {
        @Override
        public String get(Issue entity) {
            return entity.login;
        }

        @Override
        public void set(Issue entity, String value) {
            entity.login = value;
        }
    })
    .setPropertyName("login")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$login_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$login_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final NumericAttribute<Issue, Integer> COMMENTS = 
    new AttributeBuilder<Issue, Integer>("comments", int.class)
    .setProperty(new IntProperty<Issue>() {
        @Override
        public Integer get(Issue entity) {
            return entity.comments;
        }

        @Override
        public void set(Issue entity, Integer value) {
            entity.comments = value;
        }

        @Override
        public int getInt(Issue entity) {
            return entity.comments;
        }

        @Override
        public void setInt(Issue entity, int value) {
            entity.comments = value;
        }
    })
    .setPropertyName("comments")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$comments_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$comments_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final QueryAttribute<Issue, IssueState> STATE = 
    new AttributeBuilder<Issue, IssueState>("state", IssueState.class)
    .setProperty(new Property<Issue, IssueState>() {
        @Override
        public IssueState get(Issue entity) {
            return entity.state;
        }

        @Override
        public void set(Issue entity, IssueState value) {
            entity.state = value;
        }
    })
    .setPropertyName("state")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$state_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$state_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<Issue, Boolean> LOCKED = 
    new AttributeBuilder<Issue, Boolean>("locked", boolean.class)
    .setProperty(new BooleanProperty<Issue>() {
        @Override
        public Boolean get(Issue entity) {
            return entity.locked;
        }

        @Override
        public void set(Issue entity, Boolean value) {
            entity.locked = value;
        }

        @Override
        public boolean getBoolean(Issue entity) {
            return entity.locked;
        }

        @Override
        public void setBoolean(Issue entity, boolean value) {
            entity.locked = value;
        }
    })
    .setPropertyName("locked")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$locked_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$locked_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final StringAttribute<Issue, String> REPO_URL = 
    new AttributeBuilder<Issue, String>("repoUrl", String.class)
    .setProperty(new Property<Issue, String>() {
        @Override
        public String get(Issue entity) {
            return entity.repoUrl;
        }

        @Override
        public void set(Issue entity, String value) {
            entity.repoUrl = value;
        }
    })
    .setPropertyName("repoUrl")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$repoUrl_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$repoUrl_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Issue, String> HTML_URL = 
    new AttributeBuilder<Issue, String>("htmlUrl", String.class)
    .setProperty(new Property<Issue, String>() {
        @Override
        public String get(Issue entity) {
            return entity.htmlUrl;
        }

        @Override
        public void set(Issue entity, String value) {
            entity.htmlUrl = value;
        }
    })
    .setPropertyName("htmlUrl")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$htmlUrl_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$htmlUrl_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final NumericAttribute<Issue, Date> CREATED_AT = 
    new AttributeBuilder<Issue, Date>("createdAt", Date.class)
    .setProperty(new Property<Issue, Date>() {
        @Override
        public Date get(Issue entity) {
            return entity.createdAt;
        }

        @Override
        public void set(Issue entity, Date value) {
            entity.createdAt = value;
        }
    })
    .setPropertyName("createdAt")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$createdAt_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$createdAt_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final NumericAttribute<Issue, Date> CLOSED_AT = 
    new AttributeBuilder<Issue, Date>("closedAt", Date.class)
    .setProperty(new Property<Issue, Date>() {
        @Override
        public Date get(Issue entity) {
            return entity.closedAt;
        }

        @Override
        public void set(Issue entity, Date value) {
            entity.closedAt = value;
        }
    })
    .setPropertyName("closedAt")
    .setPropertyState(new Property<Issue, PropertyState>() {
        @Override
        public PropertyState get(Issue entity) {
            return entity.$closedAt_state;
        }

        @Override
        public void set(Issue entity, PropertyState value) {
            entity.$closedAt_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final Type<Issue> $TYPE = new TypeBuilder<Issue>(Issue.class, "Issue")
    .setBaseType(AbstractIssue.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<Issue>() {
        @Override
        public Issue get() {
            return new Issue();
        }
    })
    .setProxyProvider(new Function<Issue, EntityProxy<Issue>>() {
        @Override
        public EntityProxy<Issue> apply(Issue entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(ASSIGNEES)
    .addAttribute(REPO_ID)
    .addAttribute(CREATED_AT)
    .addAttribute(COMMENTS)
    .addAttribute(STATE)
    .addAttribute(MILESTONE)
    .addAttribute(PULL_REQUEST)
    .addAttribute(URL)
    .addAttribute(ASSIGNEE)
    .addAttribute(CLOSED_BY)
    .addAttribute(UPDATED_AT)
    .addAttribute(LOGIN)
    .addAttribute(ID)
    .addAttribute(HTML_URL)
    .addAttribute(LABELS)
    .addAttribute(REACTIONS)
    .addAttribute(NUMBER)
    .addAttribute(LOCKED)
    .addAttribute(USER)
    .addAttribute(BODY_HTML)
    .addAttribute(REPO_URL)
    .addAttribute(REPOSITORY)
    .addAttribute(TITLE)
    .addAttribute(CLOSED_AT)
    .addAttribute(BODY)
    .build();

    private PropertyState $id_state;

    private PropertyState $user_state;

    private PropertyState $assignee_state;

    private PropertyState $assignees_state;

    private PropertyState $labels_state;

    private PropertyState $milestone_state;

    private PropertyState $repository_state;

    private PropertyState $pullRequest_state;

    private PropertyState $closedBy_state;

    private PropertyState $reactions_state;

    private PropertyState $title_state;

    private PropertyState $url_state;

    private PropertyState $repoId_state;

    private PropertyState $body_state;

    private PropertyState $updatedAt_state;

    private PropertyState $bodyHtml_state;

    private PropertyState $number_state;

    private PropertyState $login_state;

    private PropertyState $comments_state;

    private PropertyState $state_state;

    private PropertyState $locked_state;

    private PropertyState $repoUrl_state;

    private PropertyState $htmlUrl_state;

    private PropertyState $createdAt_state;

    private PropertyState $closedAt_state;

    private final transient EntityProxy<Issue> $proxy = new EntityProxy<Issue>(this, $TYPE);

    protected Issue(Parcel in) {
        super(in);
    }

    public Issue() {
    }

    public long getId() {
        return $proxy.get(ID);
    }

    public void setId(long id) {
        $proxy.set(ID, id);
    }

    public User getUser() {
        return $proxy.get(USER);
    }

    public void setUser(User user) {
        $proxy.set(USER, user);
    }

    public User getAssignee() {
        return $proxy.get(ASSIGNEE);
    }

    public void setAssignee(User assignee) {
        $proxy.set(ASSIGNEE, assignee);
    }

    public UsersListModel getAssignees() {
        return $proxy.get(ASSIGNEES);
    }

    public void setAssignees(UsersListModel assignees) {
        $proxy.set(ASSIGNEES, assignees);
    }

    public LabelListModel getLabels() {
        return $proxy.get(LABELS);
    }

    public void setLabels(LabelListModel labels) {
        $proxy.set(LABELS, labels);
    }

    public MilestoneModel getMilestone() {
        return $proxy.get(MILESTONE);
    }

    public void setMilestone(MilestoneModel milestone) {
        $proxy.set(MILESTONE, milestone);
    }

    public Repo getRepository() {
        return $proxy.get(REPOSITORY);
    }

    public void setRepository(Repo repository) {
        $proxy.set(REPOSITORY, repository);
    }

    public PullRequest getPullRequest() {
        return $proxy.get(PULL_REQUEST);
    }

    public void setPullRequest(PullRequest pullRequest) {
        $proxy.set(PULL_REQUEST, pullRequest);
    }

    public User getClosedBy() {
        return $proxy.get(CLOSED_BY);
    }

    public void setClosedBy(User closedBy) {
        $proxy.set(CLOSED_BY, closedBy);
    }

    public ReactionsModel getReactions() {
        return $proxy.get(REACTIONS);
    }

    public void setReactions(ReactionsModel reactions) {
        $proxy.set(REACTIONS, reactions);
    }

    public String getTitle() {
        return $proxy.get(TITLE);
    }

    public void setTitle(String title) {
        $proxy.set(TITLE, title);
    }

    public String getUrl() {
        return $proxy.get(URL);
    }

    public void setUrl(String url) {
        $proxy.set(URL, url);
    }

    public String getRepoId() {
        return $proxy.get(REPO_ID);
    }

    public void setRepoId(String repoId) {
        $proxy.set(REPO_ID, repoId);
    }

    public String getBody() {
        return $proxy.get(BODY);
    }

    public void setBody(String body) {
        $proxy.set(BODY, body);
    }

    public Date getUpdatedAt() {
        return $proxy.get(UPDATED_AT);
    }

    public void setUpdatedAt(Date updatedAt) {
        $proxy.set(UPDATED_AT, updatedAt);
    }

    public String getBodyHtml() {
        return $proxy.get(BODY_HTML);
    }

    public void setBodyHtml(String bodyHtml) {
        $proxy.set(BODY_HTML, bodyHtml);
    }

    public int getNumber() {
        return $proxy.get(NUMBER);
    }

    public void setNumber(int number) {
        $proxy.set(NUMBER, number);
    }

    public String getLogin() {
        return $proxy.get(LOGIN);
    }

    public void setLogin(String login) {
        $proxy.set(LOGIN, login);
    }

    public int getComments() {
        return $proxy.get(COMMENTS);
    }

    public void setComments(int comments) {
        $proxy.set(COMMENTS, comments);
    }

    public IssueState getState() {
        return $proxy.get(STATE);
    }

    public void setState(IssueState state) {
        $proxy.set(STATE, state);
    }

    public boolean isLocked() {
        return $proxy.get(LOCKED);
    }

    public void setLocked(boolean locked) {
        $proxy.set(LOCKED, locked);
    }

    public String getRepoUrl() {
        return $proxy.get(REPO_URL);
    }

    public void setRepoUrl(String repoUrl) {
        $proxy.set(REPO_URL, repoUrl);
    }

    public String getHtmlUrl() {
        return $proxy.get(HTML_URL);
    }

    public void setHtmlUrl(String htmlUrl) {
        $proxy.set(HTML_URL, htmlUrl);
    }

    public Date getCreatedAt() {
        return $proxy.get(CREATED_AT);
    }

    public void setCreatedAt(Date createdAt) {
        $proxy.set(CREATED_AT, createdAt);
    }

    public Date getClosedAt() {
        return $proxy.get(CLOSED_AT);
    }

    public void setClosedAt(Date closedAt) {
        $proxy.set(CLOSED_AT, closedAt);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof Issue && ((Issue)obj).$proxy.equals(this.$proxy);
    }

    @Override
    public int hashCode() {
        return $proxy.hashCode();
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
