// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package com.fastaccess.data.dao.model;

import android.os.Parcel;

import com.fastaccess.data.dao.PayloadModel;
import com.fastaccess.data.dao.types.EventsType;

import java.util.Date;

import javax.annotation.Generated;

import io.requery.Persistable;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.NumericAttribute;
import io.requery.meta.QueryAttribute;
import io.requery.meta.StringAttribute;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.BooleanProperty;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.LongProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;

@Generated("io.requery.processor.EntityProcessor")
public class Event extends AbstractEvent implements Persistable {
    public static final StringAttribute<Event, String> LOGIN = 
    new AttributeBuilder<Event, String>("login", String.class)
    .setProperty(new Property<Event, String>() {
        @Override
        public String get(Event entity) {
            return entity.login;
        }

        @Override
        public void set(Event entity, String value) {
            entity.login = value;
        }
    })
    .setPropertyName("login")
    .setPropertyState(new Property<Event, PropertyState>() {
        @Override
        public PropertyState get(Event entity) {
            return entity.$login_state;
        }

        @Override
        public void set(Event entity, PropertyState value) {
            entity.$login_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final NumericAttribute<Event, Long> ID = 
    new AttributeBuilder<Event, Long>("id", long.class)
    .setProperty(new LongProperty<Event>() {
        @Override
        public Long get(Event entity) {
            return entity.id;
        }

        @Override
        public void set(Event entity, Long value) {
            entity.id = value;
        }

        @Override
        public long getLong(Event entity) {
            return entity.id;
        }

        @Override
        public void setLong(Event entity, long value) {
            entity.id = value;
        }
    })
    .setPropertyName("id")
    .setPropertyState(new Property<Event, PropertyState>() {
        @Override
        public PropertyState get(Event entity) {
            return entity.$id_state;
        }

        @Override
        public void set(Event entity, PropertyState value) {
            entity.$id_state = value;
        }
    })
    .setKey(true)
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final QueryAttribute<Event, User> ACTOR = 
    new AttributeBuilder<Event, User>("actor", User.class)
    .setProperty(new Property<Event, User>() {
        @Override
        public User get(Event entity) {
            return entity.actor;
        }

        @Override
        public void set(Event entity, User value) {
            entity.actor = value;
        }
    })
    .setPropertyName("actor")
    .setPropertyState(new Property<Event, PropertyState>() {
        @Override
        public PropertyState get(Event entity) {
            return entity.$actor_state;
        }

        @Override
        public void set(Event entity, PropertyState value) {
            entity.$actor_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final QueryAttribute<Event, Repo> REPO = 
    new AttributeBuilder<Event, Repo>("repo", Repo.class)
    .setProperty(new Property<Event, Repo>() {
        @Override
        public Repo get(Event entity) {
            return entity.repo;
        }

        @Override
        public void set(Event entity, Repo value) {
            entity.repo = value;
        }
    })
    .setPropertyName("repo")
    .setPropertyState(new Property<Event, PropertyState>() {
        @Override
        public PropertyState get(Event entity) {
            return entity.$repo_state;
        }

        @Override
        public void set(Event entity, PropertyState value) {
            entity.$repo_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.RepoConverter())
    .build();

    public static final QueryAttribute<Event, PayloadModel> PAYLOAD = 
    new AttributeBuilder<Event, PayloadModel>("payload", PayloadModel.class)
    .setProperty(new Property<Event, PayloadModel>() {
        @Override
        public PayloadModel get(Event entity) {
            return entity.payload;
        }

        @Override
        public void set(Event entity, PayloadModel value) {
            entity.payload = value;
        }
    })
    .setPropertyName("payload")
    .setPropertyState(new Property<Event, PropertyState>() {
        @Override
        public PropertyState get(Event entity) {
            return entity.$payload_state;
        }

        @Override
        public void set(Event entity, PropertyState value) {
            entity.$payload_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.PayloadConverter())
    .build();

    public static final NumericAttribute<Event, Date> CREATED_AT = 
    new AttributeBuilder<Event, Date>("createdAt", Date.class)
    .setProperty(new Property<Event, Date>() {
        @Override
        public Date get(Event entity) {
            return entity.createdAt;
        }

        @Override
        public void set(Event entity, Date value) {
            entity.createdAt = value;
        }
    })
    .setPropertyName("createdAt")
    .setPropertyState(new Property<Event, PropertyState>() {
        @Override
        public PropertyState get(Event entity) {
            return entity.$createdAt_state;
        }

        @Override
        public void set(Event entity, PropertyState value) {
            entity.$createdAt_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final QueryAttribute<Event, EventsType> TYPE = 
    new AttributeBuilder<Event, EventsType>("type", EventsType.class)
    .setProperty(new Property<Event, EventsType>() {
        @Override
        public EventsType get(Event entity) {
            return entity.type;
        }

        @Override
        public void set(Event entity, EventsType value) {
            entity.type = value;
        }
    })
    .setPropertyName("type")
    .setPropertyState(new Property<Event, PropertyState>() {
        @Override
        public PropertyState get(Event entity) {
            return entity.$type_state;
        }

        @Override
        public void set(Event entity, PropertyState value) {
            entity.$type_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<Event, Boolean> PUBLIC_EVENT = 
    new AttributeBuilder<Event, Boolean>("publicEvent", boolean.class)
    .setProperty(new BooleanProperty<Event>() {
        @Override
        public Boolean get(Event entity) {
            return entity.publicEvent;
        }

        @Override
        public void set(Event entity, Boolean value) {
            entity.publicEvent = value;
        }

        @Override
        public boolean getBoolean(Event entity) {
            return entity.publicEvent;
        }

        @Override
        public void setBoolean(Event entity, boolean value) {
            entity.publicEvent = value;
        }
    })
    .setPropertyName("publicEvent")
    .setPropertyState(new Property<Event, PropertyState>() {
        @Override
        public PropertyState get(Event entity) {
            return entity.$publicEvent_state;
        }

        @Override
        public void set(Event entity, PropertyState value) {
            entity.$publicEvent_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final Type<Event> $TYPE = new TypeBuilder<Event>(Event.class, "Event")
    .setBaseType(AbstractEvent.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<Event>() {
        @Override
        public Event get() {
            return new Event();
        }
    })
    .setProxyProvider(new Function<Event, EntityProxy<Event>>() {
        @Override
        public EntityProxy<Event> apply(Event entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(REPO)
    .addAttribute(CREATED_AT)
    .addAttribute(ACTOR)
    .addAttribute(PAYLOAD)
    .addAttribute(LOGIN)
    .addAttribute(ID)
    .addAttribute(TYPE)
    .addAttribute(PUBLIC_EVENT)
    .build();

    private PropertyState $login_state;

    private PropertyState $id_state;

    private PropertyState $actor_state;

    private PropertyState $repo_state;

    private PropertyState $payload_state;

    private PropertyState $createdAt_state;

    private PropertyState $type_state;

    private PropertyState $publicEvent_state;

    private final transient EntityProxy<Event> $proxy = new EntityProxy<Event>(this, $TYPE);

    protected Event(Parcel in) {
        super(in);
    }

    public Event() {
    }

    public String getLogin() {
        return $proxy.get(LOGIN);
    }

    public void setLogin(String login) {
        $proxy.set(LOGIN, login);
    }

    public long getId() {
        return $proxy.get(ID);
    }

    public void setId(long id) {
        $proxy.set(ID, id);
    }

    public User getActor() {
        return $proxy.get(ACTOR);
    }

    public void setActor(User actor) {
        $proxy.set(ACTOR, actor);
    }

    public Repo getRepo() {
        return $proxy.get(REPO);
    }

    public void setRepo(Repo repo) {
        $proxy.set(REPO, repo);
    }

    public PayloadModel getPayload() {
        return $proxy.get(PAYLOAD);
    }

    public void setPayload(PayloadModel payload) {
        $proxy.set(PAYLOAD, payload);
    }

    public Date getCreatedAt() {
        return $proxy.get(CREATED_AT);
    }

    public void setCreatedAt(Date createdAt) {
        $proxy.set(CREATED_AT, createdAt);
    }

    public EventsType getType() {
        return $proxy.get(TYPE);
    }

    public void setType(EventsType type) {
        $proxy.set(TYPE, type);
    }

    public boolean isPublicEvent() {
        return $proxy.get(PUBLIC_EVENT);
    }

    public void setPublicEvent(boolean publicEvent) {
        $proxy.set(PUBLIC_EVENT, publicEvent);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof Event && ((Event)obj).$proxy.equals(this.$proxy);
    }

    @Override
    public int hashCode() {
        return $proxy.hashCode();
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
