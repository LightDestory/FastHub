// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package com.fastaccess.data.dao.model;

import android.os.Parcel;
import io.requery.Persistable;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.NumericAttribute;
import io.requery.meta.QueryAttribute;
import io.requery.meta.StringAttribute;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.BooleanProperty;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.LongProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import javax.annotation.Generated;

@Generated("io.requery.processor.EntityProcessor")
public class ViewerFile extends AbstractViewerFile implements Persistable {
    public static final NumericAttribute<ViewerFile, Long> ID = 
    new AttributeBuilder<ViewerFile, Long>("id", long.class)
    .setProperty(new LongProperty<ViewerFile>() {
        @Override
        public Long get(ViewerFile entity) {
            return entity.id;
        }

        @Override
        public void set(ViewerFile entity, Long value) {
            entity.id = value;
        }

        @Override
        public long getLong(ViewerFile entity) {
            return entity.id;
        }

        @Override
        public void setLong(ViewerFile entity, long value) {
            entity.id = value;
        }
    })
    .setPropertyName("id")
    .setPropertyState(new Property<ViewerFile, PropertyState>() {
        @Override
        public PropertyState get(ViewerFile entity) {
            return entity.$id_state;
        }

        @Override
        public void set(ViewerFile entity, PropertyState value) {
            entity.$id_state = value;
        }
    })
    .setKey(true)
    .setGenerated(true)
    .setReadOnly(true)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final StringAttribute<ViewerFile, String> FULL_URL = 
    new AttributeBuilder<ViewerFile, String>("fullUrl", String.class)
    .setProperty(new Property<ViewerFile, String>() {
        @Override
        public String get(ViewerFile entity) {
            return entity.fullUrl;
        }

        @Override
        public void set(ViewerFile entity, String value) {
            entity.fullUrl = value;
        }
    })
    .setPropertyName("fullUrl")
    .setPropertyState(new Property<ViewerFile, PropertyState>() {
        @Override
        public PropertyState get(ViewerFile entity) {
            return entity.$fullUrl_state;
        }

        @Override
        public void set(ViewerFile entity, PropertyState value) {
            entity.$fullUrl_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(true)
    .buildString();

    public static final StringAttribute<ViewerFile, String> CONTENT = 
    new AttributeBuilder<ViewerFile, String>("content", String.class)
    .setProperty(new Property<ViewerFile, String>() {
        @Override
        public String get(ViewerFile entity) {
            return entity.content;
        }

        @Override
        public void set(ViewerFile entity, String value) {
            entity.content = value;
        }
    })
    .setPropertyName("content")
    .setPropertyState(new Property<ViewerFile, PropertyState>() {
        @Override
        public PropertyState get(ViewerFile entity) {
            return entity.$content_state;
        }

        @Override
        public void set(ViewerFile entity, PropertyState value) {
            entity.$content_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final QueryAttribute<ViewerFile, Boolean> REPO = 
    new AttributeBuilder<ViewerFile, Boolean>("repo", boolean.class)
    .setProperty(new BooleanProperty<ViewerFile>() {
        @Override
        public Boolean get(ViewerFile entity) {
            return entity.repo;
        }

        @Override
        public void set(ViewerFile entity, Boolean value) {
            entity.repo = value;
        }

        @Override
        public boolean getBoolean(ViewerFile entity) {
            return entity.repo;
        }

        @Override
        public void setBoolean(ViewerFile entity, boolean value) {
            entity.repo = value;
        }
    })
    .setPropertyName("repo")
    .setPropertyState(new Property<ViewerFile, PropertyState>() {
        @Override
        public PropertyState get(ViewerFile entity) {
            return entity.$repo_state;
        }

        @Override
        public void set(ViewerFile entity, PropertyState value) {
            entity.$repo_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final QueryAttribute<ViewerFile, Boolean> MARKDOWN = 
    new AttributeBuilder<ViewerFile, Boolean>("markdown", boolean.class)
    .setProperty(new BooleanProperty<ViewerFile>() {
        @Override
        public Boolean get(ViewerFile entity) {
            return entity.markdown;
        }

        @Override
        public void set(ViewerFile entity, Boolean value) {
            entity.markdown = value;
        }

        @Override
        public boolean getBoolean(ViewerFile entity) {
            return entity.markdown;
        }

        @Override
        public void setBoolean(ViewerFile entity, boolean value) {
            entity.markdown = value;
        }
    })
    .setPropertyName("markdown")
    .setPropertyState(new Property<ViewerFile, PropertyState>() {
        @Override
        public PropertyState get(ViewerFile entity) {
            return entity.$markdown_state;
        }

        @Override
        public void set(ViewerFile entity, PropertyState value) {
            entity.$markdown_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final Type<ViewerFile> $TYPE = new TypeBuilder<ViewerFile>(ViewerFile.class, "ViewerFile")
    .setBaseType(AbstractViewerFile.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<ViewerFile>() {
        @Override
        public ViewerFile get() {
            return new ViewerFile();
        }
    })
    .setProxyProvider(new Function<ViewerFile, EntityProxy<ViewerFile>>() {
        @Override
        public EntityProxy<ViewerFile> apply(ViewerFile entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(FULL_URL)
    .addAttribute(MARKDOWN)
    .addAttribute(REPO)
    .addAttribute(ID)
    .addAttribute(CONTENT)
    .build();

    private PropertyState $id_state;

    private PropertyState $fullUrl_state;

    private PropertyState $content_state;

    private PropertyState $repo_state;

    private PropertyState $markdown_state;

    private final transient EntityProxy<ViewerFile> $proxy = new EntityProxy<ViewerFile>(this, $TYPE);

    protected ViewerFile(Parcel in) {
        super(in);
    }

    public ViewerFile() {
    }

    public long getId() {
        return $proxy.get(ID);
    }

    public String getFullUrl() {
        return $proxy.get(FULL_URL);
    }

    public void setFullUrl(String fullUrl) {
        $proxy.set(FULL_URL, fullUrl);
    }

    public String getContent() {
        return $proxy.get(CONTENT);
    }

    public void setContent(String content) {
        $proxy.set(CONTENT, content);
    }

    public boolean isRepo() {
        return $proxy.get(REPO);
    }

    public void setRepo(boolean repo) {
        $proxy.set(REPO, repo);
    }

    public boolean isMarkdown() {
        return $proxy.get(MARKDOWN);
    }

    public void setMarkdown(boolean markdown) {
        $proxy.set(MARKDOWN, markdown);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof ViewerFile && ((ViewerFile)obj).$proxy.equals(this.$proxy);
    }

    @Override
    public int hashCode() {
        return $proxy.hashCode();
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
