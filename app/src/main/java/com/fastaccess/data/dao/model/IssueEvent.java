// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package com.fastaccess.data.dao.model;

import android.os.Parcel;

import com.fastaccess.data.dao.LabelModel;
import com.fastaccess.data.dao.MilestoneModel;
import com.fastaccess.data.dao.RenameModel;
import com.fastaccess.data.dao.TeamsModel;
import com.fastaccess.data.dao.types.IssueEventType;

import java.util.Date;
import java.util.List;

import javax.annotation.Generated;

import io.requery.Persistable;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.NumericAttribute;
import io.requery.meta.QueryAttribute;
import io.requery.meta.StringAttribute;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.LongProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;

@Generated("io.requery.processor.EntityProcessor")
public class IssueEvent extends AbstractIssueEvent implements Persistable {
    public static final NumericAttribute<IssueEvent, Long> ID = 
    new AttributeBuilder<IssueEvent, Long>("id", long.class)
    .setProperty(new LongProperty<IssueEvent>() {
        @Override
        public Long get(IssueEvent entity) {
            return entity.id;
        }

        @Override
        public void set(IssueEvent entity, Long value) {
            entity.id = value;
        }

        @Override
        public long getLong(IssueEvent entity) {
            return entity.id;
        }

        @Override
        public void setLong(IssueEvent entity, long value) {
            entity.id = value;
        }
    })
    .setPropertyName("id")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$id_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$id_state = value;
        }
    })
    .setKey(true)
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final QueryAttribute<IssueEvent, User> ACTOR = 
    new AttributeBuilder<IssueEvent, User>("actor", User.class)
    .setProperty(new Property<IssueEvent, User>() {
        @Override
        public User get(IssueEvent entity) {
            return entity.actor;
        }

        @Override
        public void set(IssueEvent entity, User value) {
            entity.actor = value;
        }
    })
    .setPropertyName("actor")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$actor_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$actor_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final QueryAttribute<IssueEvent, User> ASSIGNER = 
    new AttributeBuilder<IssueEvent, User>("assigner", User.class)
    .setProperty(new Property<IssueEvent, User>() {
        @Override
        public User get(IssueEvent entity) {
            return entity.assigner;
        }

        @Override
        public void set(IssueEvent entity, User value) {
            entity.assigner = value;
        }
    })
    .setPropertyName("assigner")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$assigner_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$assigner_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final QueryAttribute<IssueEvent, User> ASSIGNEE = 
    new AttributeBuilder<IssueEvent, User>("assignee", User.class)
    .setProperty(new Property<IssueEvent, User>() {
        @Override
        public User get(IssueEvent entity) {
            return entity.assignee;
        }

        @Override
        public void set(IssueEvent entity, User value) {
            entity.assignee = value;
        }
    })
    .setPropertyName("assignee")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$assignee_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$assignee_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final QueryAttribute<IssueEvent, User> REQUESTED_REVIEWER = 
    new AttributeBuilder<IssueEvent, User>("requestedReviewer", User.class)
    .setProperty(new Property<IssueEvent, User>() {
        @Override
        public User get(IssueEvent entity) {
            return entity.requestedReviewer;
        }

        @Override
        public void set(IssueEvent entity, User value) {
            entity.requestedReviewer = value;
        }
    })
    .setPropertyName("requestedReviewer")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$requestedReviewer_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$requestedReviewer_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final QueryAttribute<IssueEvent, TeamsModel> REQUESTED_TEAM = 
    new AttributeBuilder<IssueEvent, TeamsModel>("requestedTeam", TeamsModel.class)
    .setProperty(new Property<IssueEvent, TeamsModel>() {
        @Override
        public TeamsModel get(IssueEvent entity) {
            return entity.requestedTeam;
        }

        @Override
        public void set(IssueEvent entity, TeamsModel value) {
            entity.requestedTeam = value;
        }
    })
    .setPropertyName("requestedTeam")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$requestedTeam_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$requestedTeam_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.TeamConverter())
    .build();

    public static final QueryAttribute<IssueEvent, MilestoneModel> MILESTONE = 
    new AttributeBuilder<IssueEvent, MilestoneModel>("milestone", MilestoneModel.class)
    .setProperty(new Property<IssueEvent, MilestoneModel>() {
        @Override
        public MilestoneModel get(IssueEvent entity) {
            return entity.milestone;
        }

        @Override
        public void set(IssueEvent entity, MilestoneModel value) {
            entity.milestone = value;
        }
    })
    .setPropertyName("milestone")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$milestone_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$milestone_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.MilestoneConverter())
    .build();

    public static final QueryAttribute<IssueEvent, RenameModel> RENAME = 
    new AttributeBuilder<IssueEvent, RenameModel>("rename", RenameModel.class)
    .setProperty(new Property<IssueEvent, RenameModel>() {
        @Override
        public RenameModel get(IssueEvent entity) {
            return entity.rename;
        }

        @Override
        public void set(IssueEvent entity, RenameModel value) {
            entity.rename = value;
        }
    })
    .setPropertyName("rename")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$rename_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$rename_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.RenameConverter())
    .build();

    public static final QueryAttribute<IssueEvent, Issue> SOURCE = 
    new AttributeBuilder<IssueEvent, Issue>("source", Issue.class)
    .setProperty(new Property<IssueEvent, Issue>() {
        @Override
        public Issue get(IssueEvent entity) {
            return entity.source;
        }

        @Override
        public void set(IssueEvent entity, Issue value) {
            entity.source = value;
        }
    })
    .setPropertyName("source")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$source_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$source_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.IssueConverter())
    .build();

    public static final QueryAttribute<IssueEvent, LabelModel> LABEL = 
    new AttributeBuilder<IssueEvent, LabelModel>("label", LabelModel.class)
    .setProperty(new Property<IssueEvent, LabelModel>() {
        @Override
        public LabelModel get(IssueEvent entity) {
            return entity.label;
        }

        @Override
        public void set(IssueEvent entity, LabelModel value) {
            entity.label = value;
        }
    })
    .setPropertyName("label")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$label_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$label_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.LabelConverter())
    .build();

    public static final StringAttribute<IssueEvent, String> REPO_ID = 
    new AttributeBuilder<IssueEvent, String>("repoId", String.class)
    .setProperty(new Property<IssueEvent, String>() {
        @Override
        public String get(IssueEvent entity) {
            return entity.repoId;
        }

        @Override
        public void set(IssueEvent entity, String value) {
            entity.repoId = value;
        }
    })
    .setPropertyName("repoId")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$repoId_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$repoId_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<IssueEvent, String> LOGIN = 
    new AttributeBuilder<IssueEvent, String>("login", String.class)
    .setProperty(new Property<IssueEvent, String>() {
        @Override
        public String get(IssueEvent entity) {
            return entity.login;
        }

        @Override
        public void set(IssueEvent entity, String value) {
            entity.login = value;
        }
    })
    .setPropertyName("login")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$login_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$login_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final QueryAttribute<IssueEvent, IssueEventType> EVENT = 
    new AttributeBuilder<IssueEvent, IssueEventType>("event", IssueEventType.class)
    .setProperty(new Property<IssueEvent, IssueEventType>() {
        @Override
        public IssueEventType get(IssueEvent entity) {
            return entity.event;
        }

        @Override
        public void set(IssueEvent entity, IssueEventType value) {
            entity.event = value;
        }
    })
    .setPropertyName("event")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$event_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$event_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final StringAttribute<IssueEvent, String> ISSUE_ID = 
    new AttributeBuilder<IssueEvent, String>("issueId", String.class)
    .setProperty(new Property<IssueEvent, String>() {
        @Override
        public String get(IssueEvent entity) {
            return entity.issueId;
        }

        @Override
        public void set(IssueEvent entity, String value) {
            entity.issueId = value;
        }
    })
    .setPropertyName("issueId")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$issueId_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$issueId_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<IssueEvent, String> COMMIT_URL = 
    new AttributeBuilder<IssueEvent, String>("commitUrl", String.class)
    .setProperty(new Property<IssueEvent, String>() {
        @Override
        public String get(IssueEvent entity) {
            return entity.commitUrl;
        }

        @Override
        public void set(IssueEvent entity, String value) {
            entity.commitUrl = value;
        }
    })
    .setPropertyName("commitUrl")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$commitUrl_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$commitUrl_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<IssueEvent, String> COMMIT_ID = 
    new AttributeBuilder<IssueEvent, String>("commitId", String.class)
    .setProperty(new Property<IssueEvent, String>() {
        @Override
        public String get(IssueEvent entity) {
            return entity.commitId;
        }

        @Override
        public void set(IssueEvent entity, String value) {
            entity.commitId = value;
        }
    })
    .setPropertyName("commitId")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$commitId_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$commitId_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<IssueEvent, String> URL = 
    new AttributeBuilder<IssueEvent, String>("url", String.class)
    .setProperty(new Property<IssueEvent, String>() {
        @Override
        public String get(IssueEvent entity) {
            return entity.url;
        }

        @Override
        public void set(IssueEvent entity, String value) {
            entity.url = value;
        }
    })
    .setPropertyName("url")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$url_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$url_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final NumericAttribute<IssueEvent, Date> CREATED_AT = 
    new AttributeBuilder<IssueEvent, Date>("createdAt", Date.class)
    .setProperty(new Property<IssueEvent, Date>() {
        @Override
        public Date get(IssueEvent entity) {
            return entity.createdAt;
        }

        @Override
        public void set(IssueEvent entity, Date value) {
            entity.createdAt = value;
        }
    })
    .setPropertyName("createdAt")
    .setPropertyState(new Property<IssueEvent, PropertyState>() {
        @Override
        public PropertyState get(IssueEvent entity) {
            return entity.$createdAt_state;
        }

        @Override
        public void set(IssueEvent entity, PropertyState value) {
            entity.$createdAt_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final Type<IssueEvent> $TYPE = new TypeBuilder<IssueEvent>(IssueEvent.class, "IssueEvent")
    .setBaseType(AbstractIssueEvent.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<IssueEvent>() {
        @Override
        public IssueEvent get() {
            return new IssueEvent();
        }
    })
    .setProxyProvider(new Function<IssueEvent, EntityProxy<IssueEvent>>() {
        @Override
        public EntityProxy<IssueEvent> apply(IssueEvent entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(RENAME)
    .addAttribute(REPO_ID)
    .addAttribute(CREATED_AT)
    .addAttribute(ASSIGNER)
    .addAttribute(ACTOR)
    .addAttribute(REQUESTED_REVIEWER)
    .addAttribute(COMMIT_URL)
    .addAttribute(ISSUE_ID)
    .addAttribute(MILESTONE)
    .addAttribute(EVENT)
    .addAttribute(URL)
    .addAttribute(COMMIT_ID)
    .addAttribute(ASSIGNEE)
    .addAttribute(SOURCE)
    .addAttribute(REQUESTED_TEAM)
    .addAttribute(LABEL)
    .addAttribute(LOGIN)
    .addAttribute(ID)
    .build();

    private PropertyState $id_state;

    private PropertyState $actor_state;

    private PropertyState $assigner_state;

    private PropertyState $assignee_state;

    private PropertyState $requestedReviewer_state;

    private PropertyState $requestedTeam_state;

    private PropertyState $milestone_state;

    private PropertyState $rename_state;

    private PropertyState $source_state;

    private PropertyState $label_state;

    private PropertyState $repoId_state;

    private PropertyState $login_state;

    private PropertyState $event_state;

    private PropertyState $issueId_state;

    private PropertyState $commitUrl_state;

    private PropertyState $commitId_state;

    private PropertyState $url_state;

    private PropertyState $createdAt_state;

    private final transient EntityProxy<IssueEvent> $proxy = new EntityProxy<IssueEvent>(this, $TYPE);

    protected IssueEvent(Parcel in) {
        super(in);
    }

    public IssueEvent() {
    }

    public long getId() {
        return $proxy.get(ID);
    }

    public void setId(long id) {
        $proxy.set(ID, id);
    }

    public List<LabelModel> getLabels() {
        return this.labels;
    }

    public void setLabels(List<LabelModel> labels) {
        this.labels = labels;
    }

    public Issue getIssue() {
        return this.issue;
    }

    public void setIssue(Issue issue) {
        this.issue = issue;
    }

    public User getActor() {
        return $proxy.get(ACTOR);
    }

    public void setActor(User actor) {
        $proxy.set(ACTOR, actor);
    }

    public User getAssigner() {
        return $proxy.get(ASSIGNER);
    }

    public void setAssigner(User assigner) {
        $proxy.set(ASSIGNER, assigner);
    }

    public User getAssignee() {
        return $proxy.get(ASSIGNEE);
    }

    public void setAssignee(User assignee) {
        $proxy.set(ASSIGNEE, assignee);
    }

    public User getRequestedReviewer() {
        return $proxy.get(REQUESTED_REVIEWER);
    }

    public void setRequestedReviewer(User requestedReviewer) {
        $proxy.set(REQUESTED_REVIEWER, requestedReviewer);
    }

    public TeamsModel getRequestedTeam() {
        return $proxy.get(REQUESTED_TEAM);
    }

    public void setRequestedTeam(TeamsModel requestedTeam) {
        $proxy.set(REQUESTED_TEAM, requestedTeam);
    }

    public MilestoneModel getMilestone() {
        return $proxy.get(MILESTONE);
    }

    public void setMilestone(MilestoneModel milestone) {
        $proxy.set(MILESTONE, milestone);
    }

    public RenameModel getRename() {
        return $proxy.get(RENAME);
    }

    public void setRename(RenameModel rename) {
        $proxy.set(RENAME, rename);
    }

    public Issue getSource() {
        return $proxy.get(SOURCE);
    }

    public void setSource(Issue source) {
        $proxy.set(SOURCE, source);
    }

    public LabelModel getLabel() {
        return $proxy.get(LABEL);
    }

    public void setLabel(LabelModel label) {
        $proxy.set(LABEL, label);
    }

    public String getRepoId() {
        return $proxy.get(REPO_ID);
    }

    public void setRepoId(String repoId) {
        $proxy.set(REPO_ID, repoId);
    }

    public String getLogin() {
        return $proxy.get(LOGIN);
    }

    public void setLogin(String login) {
        $proxy.set(LOGIN, login);
    }

    public IssueEventType getEvent() {
        return $proxy.get(EVENT);
    }

    public void setEvent(IssueEventType event) {
        $proxy.set(EVENT, event);
    }

    public String getIssueId() {
        return $proxy.get(ISSUE_ID);
    }

    public void setIssueId(String issueId) {
        $proxy.set(ISSUE_ID, issueId);
    }

    public String getCommitUrl() {
        return $proxy.get(COMMIT_URL);
    }

    public void setCommitUrl(String commitUrl) {
        $proxy.set(COMMIT_URL, commitUrl);
    }

    public String getCommitId() {
        return $proxy.get(COMMIT_ID);
    }

    public void setCommitId(String commitId) {
        $proxy.set(COMMIT_ID, commitId);
    }

    public String getUrl() {
        return $proxy.get(URL);
    }

    public void setUrl(String url) {
        $proxy.set(URL, url);
    }

    public Date getCreatedAt() {
        return $proxy.get(CREATED_AT);
    }

    public void setCreatedAt(Date createdAt) {
        $proxy.set(CREATED_AT, createdAt);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof IssueEvent && ((IssueEvent)obj).$proxy.equals(this.$proxy);
    }

    @Override
    public int hashCode() {
        return $proxy.hashCode();
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
