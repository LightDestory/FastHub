// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package com.fastaccess.data.dao.model;

import javax.annotation.Generated;

import io.requery.Persistable;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.NumericAttribute;
import io.requery.meta.QueryAttribute;
import io.requery.meta.StringAttribute;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.IntProperty;
import io.requery.proxy.LongProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;

@Generated("io.requery.processor.EntityProcessor")
public class PinnedIssues extends AbstractPinnedIssues implements Persistable {
    public static final NumericAttribute<PinnedIssues, Integer> ENTRY_COUNT = 
    new AttributeBuilder<PinnedIssues, Integer>("entryCount", int.class)
    .setProperty(new IntProperty<PinnedIssues>() {
        @Override
        public Integer get(PinnedIssues entity) {
            return entity.entryCount;
        }

        @Override
        public void set(PinnedIssues entity, Integer value) {
            if(value != null) {
                entity.entryCount = value;
            }
        }

        @Override
        public int getInt(PinnedIssues entity) {
            return entity.entryCount;
        }

        @Override
        public void setInt(PinnedIssues entity, int value) {
            entity.entryCount = value;
        }
    })
    .setPropertyName("entryCount")
    .setPropertyState(new Property<PinnedIssues, PropertyState>() {
        @Override
        public PropertyState get(PinnedIssues entity) {
            return entity.$entryCount_state;
        }

        @Override
        public void set(PinnedIssues entity, PropertyState value) {
            entity.$entryCount_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final StringAttribute<PinnedIssues, String> LOGIN = 
    new AttributeBuilder<PinnedIssues, String>("login", String.class)
    .setProperty(new Property<PinnedIssues, String>() {
        @Override
        public String get(PinnedIssues entity) {
            return entity.login;
        }

        @Override
        public void set(PinnedIssues entity, String value) {
            entity.login = value;
        }
    })
    .setPropertyName("login")
    .setPropertyState(new Property<PinnedIssues, PropertyState>() {
        @Override
        public PropertyState get(PinnedIssues entity) {
            return entity.$login_state;
        }

        @Override
        public void set(PinnedIssues entity, PropertyState value) {
            entity.$login_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final QueryAttribute<PinnedIssues, Issue> ISSUE = 
    new AttributeBuilder<PinnedIssues, Issue>("issue", Issue.class)
    .setProperty(new Property<PinnedIssues, Issue>() {
        @Override
        public Issue get(PinnedIssues entity) {
            return entity.issue;
        }

        @Override
        public void set(PinnedIssues entity, Issue value) {
            entity.issue = value;
        }
    })
    .setPropertyName("issue")
    .setPropertyState(new Property<PinnedIssues, PropertyState>() {
        @Override
        public PropertyState get(PinnedIssues entity) {
            return entity.$issue_state;
        }

        @Override
        public void set(PinnedIssues entity, PropertyState value) {
            entity.$issue_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.IssueConverter())
    .build();

    public static final NumericAttribute<PinnedIssues, Long> ISSUE_ID = 
    new AttributeBuilder<PinnedIssues, Long>("issueId", long.class)
    .setProperty(new LongProperty<PinnedIssues>() {
        @Override
        public Long get(PinnedIssues entity) {
            return entity.issueId;
        }

        @Override
        public void set(PinnedIssues entity, Long value) {
            if(value != null) {
                entity.issueId = value;
            }
        }

        @Override
        public long getLong(PinnedIssues entity) {
            return entity.issueId;
        }

        @Override
        public void setLong(PinnedIssues entity, long value) {
            entity.issueId = value;
        }
    })
    .setPropertyName("issueId")
    .setPropertyState(new Property<PinnedIssues, PropertyState>() {
        @Override
        public PropertyState get(PinnedIssues entity) {
            return entity.$issueId_state;
        }

        @Override
        public void set(PinnedIssues entity, PropertyState value) {
            entity.$issueId_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final NumericAttribute<PinnedIssues, Long> ID = 
    new AttributeBuilder<PinnedIssues, Long>("id", long.class)
    .setProperty(new LongProperty<PinnedIssues>() {
        @Override
        public Long get(PinnedIssues entity) {
            return entity.id;
        }

        @Override
        public void set(PinnedIssues entity, Long value) {
            entity.id = value;
        }

        @Override
        public long getLong(PinnedIssues entity) {
            return entity.id;
        }

        @Override
        public void setLong(PinnedIssues entity, long value) {
            entity.id = value;
        }
    })
    .setPropertyName("id")
    .setPropertyState(new Property<PinnedIssues, PropertyState>() {
        @Override
        public PropertyState get(PinnedIssues entity) {
            return entity.$id_state;
        }

        @Override
        public void set(PinnedIssues entity, PropertyState value) {
            entity.$id_state = value;
        }
    })
    .setKey(true)
    .setGenerated(true)
    .setReadOnly(true)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final Type<PinnedIssues> $TYPE = new TypeBuilder<PinnedIssues>(PinnedIssues.class, "PinnedIssues")
    .setBaseType(AbstractPinnedIssues.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<PinnedIssues>() {
        @Override
        public PinnedIssues get() {
            return new PinnedIssues();
        }
    })
    .setProxyProvider(new Function<PinnedIssues, EntityProxy<PinnedIssues>>() {
        @Override
        public EntityProxy<PinnedIssues> apply(PinnedIssues entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(ISSUE)
    .addAttribute(ENTRY_COUNT)
    .addAttribute(LOGIN)
    .addAttribute(ISSUE_ID)
    .addAttribute(ID)
    .build();

    private PropertyState $entryCount_state;

    private PropertyState $login_state;

    private PropertyState $issue_state;

    private PropertyState $issueId_state;

    private PropertyState $id_state;

    private final transient EntityProxy<PinnedIssues> $proxy = new EntityProxy<PinnedIssues>(this, $TYPE);

    public PinnedIssues() {
    }

    public int getEntryCount() {
        return $proxy.get(ENTRY_COUNT);
    }

    public void setEntryCount(int entryCount) {
        $proxy.set(ENTRY_COUNT, entryCount);
    }

    public String getLogin() {
        return $proxy.get(LOGIN);
    }

    public void setLogin(String login) {
        $proxy.set(LOGIN, login);
    }

    public Issue getIssue() {
        return $proxy.get(ISSUE);
    }

    public void setIssue(Issue issue) {
        $proxy.set(ISSUE, issue);
    }

    public long getIssueId() {
        return $proxy.get(ISSUE_ID);
    }

    public void setIssueId(long issueId) {
        $proxy.set(ISSUE_ID, issueId);
    }

    public long getId() {
        return $proxy.get(ID);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof PinnedIssues && ((PinnedIssues)obj).$proxy.equals(this.$proxy);
    }

    @Override
    public int hashCode() {
        return $proxy.hashCode();
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
