// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package com.fastaccess.data.dao.model;

import android.os.Parcel;

import com.fastaccess.data.dao.ReactionsModel;

import java.util.Date;

import javax.annotation.Generated;

import io.requery.Persistable;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.NumericAttribute;
import io.requery.meta.QueryAttribute;
import io.requery.meta.StringAttribute;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.IntProperty;
import io.requery.proxy.LongProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;

@Generated("io.requery.processor.EntityProcessor")
public class Comment extends AbstractComment implements Persistable {
    public static final NumericAttribute<Comment, Long> ID = 
    new AttributeBuilder<Comment, Long>("id", long.class)
    .setProperty(new LongProperty<Comment>() {
        @Override
        public Long get(Comment entity) {
            return entity.id;
        }

        @Override
        public void set(Comment entity, Long value) {
            entity.id = value;
        }

        @Override
        public long getLong(Comment entity) {
            return entity.id;
        }

        @Override
        public void setLong(Comment entity, long value) {
            entity.id = value;
        }
    })
    .setPropertyName("id")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$id_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$id_state = value;
        }
    })
    .setKey(true)
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final QueryAttribute<Comment, User> USER = 
    new AttributeBuilder<Comment, User>("user_column", User.class)
    .setProperty(new Property<Comment, User>() {
        @Override
        public User get(Comment entity) {
            return entity.user;
        }

        @Override
        public void set(Comment entity, User value) {
            entity.user = value;
        }
    })
    .setPropertyName("user")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$user_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$user_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final QueryAttribute<Comment, ReactionsModel> REACTIONS = 
    new AttributeBuilder<Comment, ReactionsModel>("reactions", ReactionsModel.class)
    .setProperty(new Property<Comment, ReactionsModel>() {
        @Override
        public ReactionsModel get(Comment entity) {
            return entity.reactions;
        }

        @Override
        public void set(Comment entity, ReactionsModel value) {
            entity.reactions = value;
        }
    })
    .setPropertyName("reactions")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$reactions_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$reactions_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.ReactionsConverter())
    .build();

    public static final NumericAttribute<Comment, Date> UPDATED_AT = 
    new AttributeBuilder<Comment, Date>("updatedAt", Date.class)
    .setProperty(new Property<Comment, Date>() {
        @Override
        public Date get(Comment entity) {
            return entity.updatedAt;
        }

        @Override
        public void set(Comment entity, Date value) {
            entity.updatedAt = value;
        }
    })
    .setPropertyName("updatedAt")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$updatedAt_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$updatedAt_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final StringAttribute<Comment, String> PATH = 
    new AttributeBuilder<Comment, String>("path", String.class)
    .setProperty(new Property<Comment, String>() {
        @Override
        public String get(Comment entity) {
            return entity.path;
        }

        @Override
        public void set(Comment entity, String value) {
            entity.path = value;
        }
    })
    .setPropertyName("path")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$path_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$path_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final NumericAttribute<Comment, Date> CREATED_AT = 
    new AttributeBuilder<Comment, Date>("createdAt", Date.class)
    .setProperty(new Property<Comment, Date>() {
        @Override
        public Date get(Comment entity) {
            return entity.createdAt;
        }

        @Override
        public void set(Comment entity, Date value) {
            entity.createdAt = value;
        }
    })
    .setPropertyName("createdAt")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$createdAt_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$createdAt_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final NumericAttribute<Comment, Integer> LINE = 
    new AttributeBuilder<Comment, Integer>("line", int.class)
    .setProperty(new IntProperty<Comment>() {
        @Override
        public Integer get(Comment entity) {
            return entity.line;
        }

        @Override
        public void set(Comment entity, Integer value) {
            entity.line = value;
        }

        @Override
        public int getInt(Comment entity) {
            return entity.line;
        }

        @Override
        public void setInt(Comment entity, int value) {
            entity.line = value;
        }
    })
    .setPropertyName("line")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$line_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$line_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final StringAttribute<Comment, String> COMMIT_ID = 
    new AttributeBuilder<Comment, String>("commitId", String.class)
    .setProperty(new Property<Comment, String>() {
        @Override
        public String get(Comment entity) {
            return entity.commitId;
        }

        @Override
        public void set(Comment entity, String value) {
            entity.commitId = value;
        }
    })
    .setPropertyName("commitId")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$commitId_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$commitId_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Comment, String> AUTHOR_ASSOCIATION = 
    new AttributeBuilder<Comment, String>("authorAssociation", String.class)
    .setProperty(new Property<Comment, String>() {
        @Override
        public String get(Comment entity) {
            return entity.authorAssociation;
        }

        @Override
        public void set(Comment entity, String value) {
            entity.authorAssociation = value;
        }
    })
    .setPropertyName("authorAssociation")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$authorAssociation_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$authorAssociation_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Comment, String> BODY = 
    new AttributeBuilder<Comment, String>("body", String.class)
    .setProperty(new Property<Comment, String>() {
        @Override
        public String get(Comment entity) {
            return entity.body;
        }

        @Override
        public void set(Comment entity, String value) {
            entity.body = value;
        }
    })
    .setPropertyName("body")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$body_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$body_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Comment, String> REPO_ID = 
    new AttributeBuilder<Comment, String>("repoId", String.class)
    .setProperty(new Property<Comment, String>() {
        @Override
        public String get(Comment entity) {
            return entity.repoId;
        }

        @Override
        public void set(Comment entity, String value) {
            entity.repoId = value;
        }
    })
    .setPropertyName("repoId")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$repoId_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$repoId_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Comment, String> LOGIN = 
    new AttributeBuilder<Comment, String>("login", String.class)
    .setProperty(new Property<Comment, String>() {
        @Override
        public String get(Comment entity) {
            return entity.login;
        }

        @Override
        public void set(Comment entity, String value) {
            entity.login = value;
        }
    })
    .setPropertyName("login")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$login_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$login_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Comment, String> URL = 
    new AttributeBuilder<Comment, String>("url", String.class)
    .setProperty(new Property<Comment, String>() {
        @Override
        public String get(Comment entity) {
            return entity.url;
        }

        @Override
        public void set(Comment entity, String value) {
            entity.url = value;
        }
    })
    .setPropertyName("url")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$url_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$url_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Comment, String> ISSUE_ID = 
    new AttributeBuilder<Comment, String>("issueId", String.class)
    .setProperty(new Property<Comment, String>() {
        @Override
        public String get(Comment entity) {
            return entity.issueId;
        }

        @Override
        public void set(Comment entity, String value) {
            entity.issueId = value;
        }
    })
    .setPropertyName("issueId")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$issueId_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$issueId_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Comment, String> GIST_ID = 
    new AttributeBuilder<Comment, String>("gistId", String.class)
    .setProperty(new Property<Comment, String>() {
        @Override
        public String get(Comment entity) {
            return entity.gistId;
        }

        @Override
        public void set(Comment entity, String value) {
            entity.gistId = value;
        }
    })
    .setPropertyName("gistId")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$gistId_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$gistId_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Comment, String> BODY_HTML = 
    new AttributeBuilder<Comment, String>("bodyHtml", String.class)
    .setProperty(new Property<Comment, String>() {
        @Override
        public String get(Comment entity) {
            return entity.bodyHtml;
        }

        @Override
        public void set(Comment entity, String value) {
            entity.bodyHtml = value;
        }
    })
    .setPropertyName("bodyHtml")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$bodyHtml_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$bodyHtml_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Comment, String> HTML_URL = 
    new AttributeBuilder<Comment, String>("htmlUrl", String.class)
    .setProperty(new Property<Comment, String>() {
        @Override
        public String get(Comment entity) {
            return entity.htmlUrl;
        }

        @Override
        public void set(Comment entity, String value) {
            entity.htmlUrl = value;
        }
    })
    .setPropertyName("htmlUrl")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$htmlUrl_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$htmlUrl_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final NumericAttribute<Comment, Integer> POSITION = 
    new AttributeBuilder<Comment, Integer>("position", int.class)
    .setProperty(new IntProperty<Comment>() {
        @Override
        public Integer get(Comment entity) {
            return entity.position;
        }

        @Override
        public void set(Comment entity, Integer value) {
            entity.position = value;
        }

        @Override
        public int getInt(Comment entity) {
            return entity.position;
        }

        @Override
        public void setInt(Comment entity, int value) {
            entity.position = value;
        }
    })
    .setPropertyName("position")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$position_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$position_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final StringAttribute<Comment, String> PULL_REQUEST_ID = 
    new AttributeBuilder<Comment, String>("pullRequestId", String.class)
    .setProperty(new Property<Comment, String>() {
        @Override
        public String get(Comment entity) {
            return entity.pullRequestId;
        }

        @Override
        public void set(Comment entity, String value) {
            entity.pullRequestId = value;
        }
    })
    .setPropertyName("pullRequestId")
    .setPropertyState(new Property<Comment, PropertyState>() {
        @Override
        public PropertyState get(Comment entity) {
            return entity.$pullRequestId_state;
        }

        @Override
        public void set(Comment entity, PropertyState value) {
            entity.$pullRequestId_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final Type<Comment> $TYPE = new TypeBuilder<Comment>(Comment.class, "Comment")
    .setBaseType(AbstractComment.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<Comment>() {
        @Override
        public Comment get() {
            return new Comment();
        }
    })
    .setProxyProvider(new Function<Comment, EntityProxy<Comment>>() {
        @Override
        public EntityProxy<Comment> apply(Comment entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(PATH)
    .addAttribute(REACTIONS)
    .addAttribute(REPO_ID)
    .addAttribute(CREATED_AT)
    .addAttribute(ISSUE_ID)
    .addAttribute(USER)
    .addAttribute(BODY_HTML)
    .addAttribute(URL)
    .addAttribute(POSITION)
    .addAttribute(GIST_ID)
    .addAttribute(PULL_REQUEST_ID)
    .addAttribute(COMMIT_ID)
    .addAttribute(LINE)
    .addAttribute(AUTHOR_ASSOCIATION)
    .addAttribute(UPDATED_AT)
    .addAttribute(LOGIN)
    .addAttribute(ID)
    .addAttribute(HTML_URL)
    .addAttribute(BODY)
    .build();

    private PropertyState $id_state;

    private PropertyState $user_state;

    private PropertyState $reactions_state;

    private PropertyState $updatedAt_state;

    private PropertyState $path_state;

    private PropertyState $createdAt_state;

    private PropertyState $line_state;

    private PropertyState $commitId_state;

    private PropertyState $authorAssociation_state;

    private PropertyState $body_state;

    private PropertyState $repoId_state;

    private PropertyState $login_state;

    private PropertyState $url_state;

    private PropertyState $issueId_state;

    private PropertyState $gistId_state;

    private PropertyState $bodyHtml_state;

    private PropertyState $htmlUrl_state;

    private PropertyState $position_state;

    private PropertyState $pullRequestId_state;

    private final transient EntityProxy<Comment> $proxy = new EntityProxy<Comment>(this, $TYPE);

    protected Comment(Parcel in) {
        super(in);
    }

    public Comment() {
    }

    public long getId() {
        return $proxy.get(ID);
    }

    public void setId(long id) {
        $proxy.set(ID, id);
    }

    public User getUser() {
        return $proxy.get(USER);
    }

    public void setUser(User user) {
        $proxy.set(USER, user);
    }

    public ReactionsModel getReactions() {
        return $proxy.get(REACTIONS);
    }

    public void setReactions(ReactionsModel reactions) {
        $proxy.set(REACTIONS, reactions);
    }

    public Date getUpdatedAt() {
        return $proxy.get(UPDATED_AT);
    }

    public void setUpdatedAt(Date updatedAt) {
        $proxy.set(UPDATED_AT, updatedAt);
    }

    public String getPath() {
        return $proxy.get(PATH);
    }

    public void setPath(String path) {
        $proxy.set(PATH, path);
    }

    public Date getCreatedAt() {
        return $proxy.get(CREATED_AT);
    }

    public void setCreatedAt(Date createdAt) {
        $proxy.set(CREATED_AT, createdAt);
    }

    public int getLine() {
        return $proxy.get(LINE);
    }

    public void setLine(int line) {
        $proxy.set(LINE, line);
    }

    public String getCommitId() {
        return $proxy.get(COMMIT_ID);
    }

    public void setCommitId(String commitId) {
        $proxy.set(COMMIT_ID, commitId);
    }

    public String getAuthorAssociation() {
        return $proxy.get(AUTHOR_ASSOCIATION);
    }

    public void setAuthorAssociation(String authorAssociation) {
        $proxy.set(AUTHOR_ASSOCIATION, authorAssociation);
    }

    public String getBody() {
        return $proxy.get(BODY);
    }

    public void setBody(String body) {
        $proxy.set(BODY, body);
    }

    public String getRepoId() {
        return $proxy.get(REPO_ID);
    }

    public void setRepoId(String repoId) {
        $proxy.set(REPO_ID, repoId);
    }

    public String getLogin() {
        return $proxy.get(LOGIN);
    }

    public void setLogin(String login) {
        $proxy.set(LOGIN, login);
    }

    public String getUrl() {
        return $proxy.get(URL);
    }

    public void setUrl(String url) {
        $proxy.set(URL, url);
    }

    public String getIssueId() {
        return $proxy.get(ISSUE_ID);
    }

    public void setIssueId(String issueId) {
        $proxy.set(ISSUE_ID, issueId);
    }

    public String getGistId() {
        return $proxy.get(GIST_ID);
    }

    public void setGistId(String gistId) {
        $proxy.set(GIST_ID, gistId);
    }

    public String getBodyHtml() {
        return $proxy.get(BODY_HTML);
    }

    public void setBodyHtml(String bodyHtml) {
        $proxy.set(BODY_HTML, bodyHtml);
    }

    public String getHtmlUrl() {
        return $proxy.get(HTML_URL);
    }

    public void setHtmlUrl(String htmlUrl) {
        $proxy.set(HTML_URL, htmlUrl);
    }

    public int getPosition() {
        return $proxy.get(POSITION);
    }

    public void setPosition(int position) {
        $proxy.set(POSITION, position);
    }

    public String getPullRequestId() {
        return $proxy.get(PULL_REQUEST_ID);
    }

    public void setPullRequestId(String pullRequestId) {
        $proxy.set(PULL_REQUEST_ID, pullRequestId);
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
