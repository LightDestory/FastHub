// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package com.fastaccess.data.dao.model;

import android.os.Parcel;
import io.requery.Persistable;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.NumericAttribute;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.LongProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Date;
import javax.annotation.Generated;

@Generated("io.requery.processor.EntityProcessor")
public class NotificationQueue extends AbstractNotificationQueue implements Persistable {
    public static final NumericAttribute<NotificationQueue, Long> NOTIFICATION_ID = 
    new AttributeBuilder<NotificationQueue, Long>("notificationId", long.class)
    .setProperty(new LongProperty<NotificationQueue>() {
        @Override
        public Long get(NotificationQueue entity) {
            return entity.notificationId;
        }

        @Override
        public void set(NotificationQueue entity, Long value) {
            entity.notificationId = value;
        }

        @Override
        public long getLong(NotificationQueue entity) {
            return entity.notificationId;
        }

        @Override
        public void setLong(NotificationQueue entity, long value) {
            entity.notificationId = value;
        }
    })
    .setPropertyName("notificationId")
    .setPropertyState(new Property<NotificationQueue, PropertyState>() {
        @Override
        public PropertyState get(NotificationQueue entity) {
            return entity.$notificationId_state;
        }

        @Override
        public void set(NotificationQueue entity, PropertyState value) {
            entity.$notificationId_state = value;
        }
    })
    .setKey(true)
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final NumericAttribute<NotificationQueue, Date> UPDATE_AT = 
    new AttributeBuilder<NotificationQueue, Date>("updateAt", Date.class)
    .setProperty(new Property<NotificationQueue, Date>() {
        @Override
        public Date get(NotificationQueue entity) {
            return entity.updateAt;
        }

        @Override
        public void set(NotificationQueue entity, Date value) {
            entity.updateAt = value;
        }
    })
    .setPropertyName("updateAt")
    .setPropertyState(new Property<NotificationQueue, PropertyState>() {
        @Override
        public PropertyState get(NotificationQueue entity) {
            return entity.$updateAt_state;
        }

        @Override
        public void set(NotificationQueue entity, PropertyState value) {
            entity.$updateAt_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final Type<NotificationQueue> $TYPE = new TypeBuilder<NotificationQueue>(NotificationQueue.class, "NotificationQueue")
    .setBaseType(AbstractNotificationQueue.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<NotificationQueue>() {
        @Override
        public NotificationQueue get() {
            return new NotificationQueue();
        }
    })
    .setProxyProvider(new Function<NotificationQueue, EntityProxy<NotificationQueue>>() {
        @Override
        public EntityProxy<NotificationQueue> apply(NotificationQueue entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(NOTIFICATION_ID)
    .addAttribute(UPDATE_AT)
    .build();

    private PropertyState $notificationId_state;

    private PropertyState $updateAt_state;

    private final transient EntityProxy<NotificationQueue> $proxy = new EntityProxy<NotificationQueue>(this, $TYPE);

    protected NotificationQueue(Parcel in) {
        super(in);
    }

    public NotificationQueue() {
    }

    public long getNotificationId() {
        return $proxy.get(NOTIFICATION_ID);
    }

    public void setNotificationId(long notificationId) {
        $proxy.set(NOTIFICATION_ID, notificationId);
    }

    public Date getUpdateAt() {
        return $proxy.get(UPDATE_AT);
    }

    public void setUpdateAt(Date updateAt) {
        $proxy.set(UPDATE_AT, updateAt);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof NotificationQueue && ((NotificationQueue)obj).$proxy.equals(this.$proxy);
    }

    @Override
    public int hashCode() {
        return $proxy.hashCode();
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
