// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package com.fastaccess.data.dao.model;

import android.os.Parcel;
import com.fastaccess.data.dao.CommitFileListModel;
import com.fastaccess.data.dao.CommitListModel;
import com.fastaccess.data.dao.GitCommitModel;
import com.fastaccess.data.dao.GithubState;
import io.requery.Persistable;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.NumericAttribute;
import io.requery.meta.QueryAttribute;
import io.requery.meta.StringAttribute;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.BooleanProperty;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.IntProperty;
import io.requery.proxy.LongProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import javax.annotation.Generated;

@Generated("io.requery.processor.EntityProcessor")
public class Commit extends AbstractCommit implements Persistable {
    public static final NumericAttribute<Commit, Integer> COMMENT_COUNT = 
    new AttributeBuilder<Commit, Integer>("commentCount", int.class)
    .setProperty(new IntProperty<Commit>() {
        @Override
        public Integer get(Commit entity) {
            return entity.commentCount;
        }

        @Override
        public void set(Commit entity, Integer value) {
            if(value != null) {
                entity.commentCount = value;
            }
        }

        @Override
        public int getInt(Commit entity) {
            return entity.commentCount;
        }

        @Override
        public void setInt(Commit entity, int value) {
            entity.commentCount = value;
        }
    })
    .setPropertyName("commentCount")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$commentCount_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$commentCount_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final NumericAttribute<Commit, Long> ID = 
    new AttributeBuilder<Commit, Long>("id", long.class)
    .setProperty(new LongProperty<Commit>() {
        @Override
        public Long get(Commit entity) {
            return entity.id;
        }

        @Override
        public void set(Commit entity, Long value) {
            entity.id = value;
        }

        @Override
        public long getLong(Commit entity) {
            return entity.id;
        }

        @Override
        public void setLong(Commit entity, long value) {
            entity.id = value;
        }
    })
    .setPropertyName("id")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$id_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$id_state = value;
        }
    })
    .setKey(true)
    .setGenerated(true)
    .setReadOnly(true)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final QueryAttribute<Commit, GithubState> STATS = 
    new AttributeBuilder<Commit, GithubState>("stats", GithubState.class)
    .setProperty(new Property<Commit, GithubState>() {
        @Override
        public GithubState get(Commit entity) {
            return entity.stats;
        }

        @Override
        public void set(Commit entity, GithubState value) {
            entity.stats = value;
        }
    })
    .setPropertyName("stats")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$stats_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$stats_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.GitHubStateConverter())
    .build();

    public static final QueryAttribute<Commit, CommitFileListModel> FILES = 
    new AttributeBuilder<Commit, CommitFileListModel>("files", CommitFileListModel.class)
    .setProperty(new Property<Commit, CommitFileListModel>() {
        @Override
        public CommitFileListModel get(Commit entity) {
            return entity.files;
        }

        @Override
        public void set(Commit entity, CommitFileListModel value) {
            entity.files = value;
        }
    })
    .setPropertyName("files")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$files_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$files_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.CommitFilesConverter())
    .build();

    public static final QueryAttribute<Commit, CommitListModel> PARENTS = 
    new AttributeBuilder<Commit, CommitListModel>("parents", CommitListModel.class)
    .setProperty(new Property<Commit, CommitListModel>() {
        @Override
        public CommitListModel get(Commit entity) {
            return entity.parents;
        }

        @Override
        public void set(Commit entity, CommitListModel value) {
            entity.parents = value;
        }
    })
    .setPropertyName("parents")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$parents_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$parents_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.CommitsConverter())
    .build();

    public static final QueryAttribute<Commit, GitCommitModel> GIT_COMMIT = 
    new AttributeBuilder<Commit, GitCommitModel>("gitCommit", GitCommitModel.class)
    .setProperty(new Property<Commit, GitCommitModel>() {
        @Override
        public GitCommitModel get(Commit entity) {
            return entity.gitCommit;
        }

        @Override
        public void set(Commit entity, GitCommitModel value) {
            entity.gitCommit = value;
        }
    })
    .setPropertyName("gitCommit")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$gitCommit_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$gitCommit_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.GitCommitConverter())
    .build();

    public static final QueryAttribute<Commit, User> AUTHOR = 
    new AttributeBuilder<Commit, User>("author", User.class)
    .setProperty(new Property<Commit, User>() {
        @Override
        public User get(Commit entity) {
            return entity.author;
        }

        @Override
        public void set(Commit entity, User value) {
            entity.author = value;
        }
    })
    .setPropertyName("author")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$author_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$author_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final QueryAttribute<Commit, User> COMMITTER = 
    new AttributeBuilder<Commit, User>("committer", User.class)
    .setProperty(new Property<Commit, User>() {
        @Override
        public User get(Commit entity) {
            return entity.committer;
        }

        @Override
        public void set(Commit entity, User value) {
            entity.committer = value;
        }
    })
    .setPropertyName("committer")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$committer_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$committer_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final QueryAttribute<Commit, Repo> REPO = 
    new AttributeBuilder<Commit, Repo>("repo", Repo.class)
    .setProperty(new Property<Commit, Repo>() {
        @Override
        public Repo get(Commit entity) {
            return entity.repo;
        }

        @Override
        public void set(Commit entity, Repo value) {
            entity.repo = value;
        }
    })
    .setPropertyName("repo")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$repo_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$repo_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.RepoConverter())
    .build();

    public static final QueryAttribute<Commit, User> USER = 
    new AttributeBuilder<Commit, User>("user_column", User.class)
    .setProperty(new Property<Commit, User>() {
        @Override
        public User get(Commit entity) {
            return entity.user;
        }

        @Override
        public void set(Commit entity, User value) {
            entity.user = value;
        }
    })
    .setPropertyName("user")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$user_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$user_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final StringAttribute<Commit, String> REF = 
    new AttributeBuilder<Commit, String>("ref_column", String.class)
    .setProperty(new Property<Commit, String>() {
        @Override
        public String get(Commit entity) {
            return entity.ref;
        }

        @Override
        public void set(Commit entity, String value) {
            entity.ref = value;
        }
    })
    .setPropertyName("ref")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$ref_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$ref_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Commit, String> URL = 
    new AttributeBuilder<Commit, String>("url", String.class)
    .setProperty(new Property<Commit, String>() {
        @Override
        public String get(Commit entity) {
            return entity.url;
        }

        @Override
        public void set(Commit entity, String value) {
            entity.url = value;
        }
    })
    .setPropertyName("url")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$url_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$url_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final NumericAttribute<Commit, Long> PULL_REQUEST_NUMBER = 
    new AttributeBuilder<Commit, Long>("pullRequestNumber", long.class)
    .setProperty(new LongProperty<Commit>() {
        @Override
        public Long get(Commit entity) {
            return entity.pullRequestNumber;
        }

        @Override
        public void set(Commit entity, Long value) {
            entity.pullRequestNumber = value;
        }

        @Override
        public long getLong(Commit entity) {
            return entity.pullRequestNumber;
        }

        @Override
        public void setLong(Commit entity, long value) {
            entity.pullRequestNumber = value;
        }
    })
    .setPropertyName("pullRequestNumber")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$pullRequestNumber_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$pullRequestNumber_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final StringAttribute<Commit, String> HTML_URL = 
    new AttributeBuilder<Commit, String>("htmlUrl", String.class)
    .setProperty(new Property<Commit, String>() {
        @Override
        public String get(Commit entity) {
            return entity.htmlUrl;
        }

        @Override
        public void set(Commit entity, String value) {
            entity.htmlUrl = value;
        }
    })
    .setPropertyName("htmlUrl")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$htmlUrl_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$htmlUrl_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Commit, String> LOGIN = 
    new AttributeBuilder<Commit, String>("login", String.class)
    .setProperty(new Property<Commit, String>() {
        @Override
        public String get(Commit entity) {
            return entity.login;
        }

        @Override
        public void set(Commit entity, String value) {
            entity.login = value;
        }
    })
    .setPropertyName("login")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$login_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$login_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final QueryAttribute<Commit, Boolean> DISTINCTED = 
    new AttributeBuilder<Commit, Boolean>("distincted", boolean.class)
    .setProperty(new BooleanProperty<Commit>() {
        @Override
        public Boolean get(Commit entity) {
            return entity.distincted;
        }

        @Override
        public void set(Commit entity, Boolean value) {
            entity.distincted = value;
        }

        @Override
        public boolean getBoolean(Commit entity) {
            return entity.distincted;
        }

        @Override
        public void setBoolean(Commit entity, boolean value) {
            entity.distincted = value;
        }
    })
    .setPropertyName("distincted")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$distincted_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$distincted_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final StringAttribute<Commit, String> SHA = 
    new AttributeBuilder<Commit, String>("sha", String.class)
    .setProperty(new Property<Commit, String>() {
        @Override
        public String get(Commit entity) {
            return entity.sha;
        }

        @Override
        public void set(Commit entity, String value) {
            entity.sha = value;
        }
    })
    .setPropertyName("sha")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$sha_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$sha_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Commit, String> REPO_ID = 
    new AttributeBuilder<Commit, String>("repoId", String.class)
    .setProperty(new Property<Commit, String>() {
        @Override
        public String get(Commit entity) {
            return entity.repoId;
        }

        @Override
        public void set(Commit entity, String value) {
            entity.repoId = value;
        }
    })
    .setPropertyName("repoId")
    .setPropertyState(new Property<Commit, PropertyState>() {
        @Override
        public PropertyState get(Commit entity) {
            return entity.$repoId_state;
        }

        @Override
        public void set(Commit entity, PropertyState value) {
            entity.$repoId_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final Type<Commit> $TYPE = new TypeBuilder<Commit>(Commit.class, "commit_table")
    .setBaseType(AbstractCommit.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<Commit>() {
        @Override
        public Commit get() {
            return new Commit();
        }
    })
    .setProxyProvider(new Function<Commit, EntityProxy<Commit>>() {
        @Override
        public EntityProxy<Commit> apply(Commit entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(GIT_COMMIT)
    .addAttribute(REPO_ID)
    .addAttribute(PULL_REQUEST_NUMBER)
    .addAttribute(COMMENT_COUNT)
    .addAttribute(STATS)
    .addAttribute(PARENTS)
    .addAttribute(FILES)
    .addAttribute(AUTHOR)
    .addAttribute(USER)
    .addAttribute(SHA)
    .addAttribute(URL)
    .addAttribute(REF)
    .addAttribute(REPO)
    .addAttribute(DISTINCTED)
    .addAttribute(LOGIN)
    .addAttribute(ID)
    .addAttribute(HTML_URL)
    .addAttribute(COMMITTER)
    .build();

    private PropertyState $commentCount_state;

    private PropertyState $id_state;

    private PropertyState $stats_state;

    private PropertyState $files_state;

    private PropertyState $parents_state;

    private PropertyState $gitCommit_state;

    private PropertyState $author_state;

    private PropertyState $committer_state;

    private PropertyState $repo_state;

    private PropertyState $user_state;

    private PropertyState $ref_state;

    private PropertyState $url_state;

    private PropertyState $pullRequestNumber_state;

    private PropertyState $htmlUrl_state;

    private PropertyState $login_state;

    private PropertyState $distincted_state;

    private PropertyState $sha_state;

    private PropertyState $repoId_state;

    private final transient EntityProxy<Commit> $proxy = new EntityProxy<Commit>(this, $TYPE);

    protected Commit(Parcel in) {
        super(in);
    }

    public Commit() {
    }

    public int getCommentCount() {
        return $proxy.get(COMMENT_COUNT);
    }

    public void setCommentCount(int commentCount) {
        $proxy.set(COMMENT_COUNT, commentCount);
    }

    public long getId() {
        return $proxy.get(ID);
    }

    public GithubState getStats() {
        return $proxy.get(STATS);
    }

    public void setStats(GithubState stats) {
        $proxy.set(STATS, stats);
    }

    public CommitFileListModel getFiles() {
        return $proxy.get(FILES);
    }

    public void setFiles(CommitFileListModel files) {
        $proxy.set(FILES, files);
    }

    public CommitListModel getParents() {
        return $proxy.get(PARENTS);
    }

    public void setParents(CommitListModel parents) {
        $proxy.set(PARENTS, parents);
    }

    public GitCommitModel getGitCommit() {
        return $proxy.get(GIT_COMMIT);
    }

    public void setGitCommit(GitCommitModel gitCommit) {
        $proxy.set(GIT_COMMIT, gitCommit);
    }

    public User getAuthor() {
        return $proxy.get(AUTHOR);
    }

    public void setAuthor(User author) {
        $proxy.set(AUTHOR, author);
    }

    public User getCommitter() {
        return $proxy.get(COMMITTER);
    }

    public void setCommitter(User committer) {
        $proxy.set(COMMITTER, committer);
    }

    public Repo getRepo() {
        return $proxy.get(REPO);
    }

    public void setRepo(Repo repo) {
        $proxy.set(REPO, repo);
    }

    public User getUser() {
        return $proxy.get(USER);
    }

    public void setUser(User user) {
        $proxy.set(USER, user);
    }

    public String getRef() {
        return $proxy.get(REF);
    }

    public void setRef(String ref) {
        $proxy.set(REF, ref);
    }

    public String getUrl() {
        return $proxy.get(URL);
    }

    public void setUrl(String url) {
        $proxy.set(URL, url);
    }

    public long getPullRequestNumber() {
        return $proxy.get(PULL_REQUEST_NUMBER);
    }

    public void setPullRequestNumber(long pullRequestNumber) {
        $proxy.set(PULL_REQUEST_NUMBER, pullRequestNumber);
    }

    public String getHtmlUrl() {
        return $proxy.get(HTML_URL);
    }

    public void setHtmlUrl(String htmlUrl) {
        $proxy.set(HTML_URL, htmlUrl);
    }

    public String getLogin() {
        return $proxy.get(LOGIN);
    }

    public void setLogin(String login) {
        $proxy.set(LOGIN, login);
    }

    public boolean isDistincted() {
        return $proxy.get(DISTINCTED);
    }

    public void setDistincted(boolean distincted) {
        $proxy.set(DISTINCTED, distincted);
    }

    public String getSha() {
        return $proxy.get(SHA);
    }

    public void setSha(String sha) {
        $proxy.set(SHA, sha);
    }

    public String getRepoId() {
        return $proxy.get(REPO_ID);
    }

    public void setRepoId(String repoId) {
        $proxy.set(REPO_ID, repoId);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof Commit && ((Commit)obj).$proxy.equals(this.$proxy);
    }

    @Override
    public int hashCode() {
        return $proxy.hashCode();
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
