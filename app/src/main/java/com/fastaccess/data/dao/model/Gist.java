// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package com.fastaccess.data.dao.model;

import android.os.Parcel;

import com.fastaccess.data.dao.GithubFileModel;

import java.util.Date;

import javax.annotation.Generated;

import io.requery.Persistable;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.NumericAttribute;
import io.requery.meta.QueryAttribute;
import io.requery.meta.StringAttribute;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.BooleanProperty;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.IntProperty;
import io.requery.proxy.LongProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;

@Generated("io.requery.processor.EntityProcessor")
public class Gist extends AbstractGist implements Persistable {
    public static final NumericAttribute<Gist, Long> ID = 
    new AttributeBuilder<Gist, Long>("id", long.class)
    .setProperty(new LongProperty<Gist>() {
        @Override
        public Long get(Gist entity) {
            return entity.id;
        }

        @Override
        public void set(Gist entity, Long value) {
            entity.id = value;
        }

        @Override
        public long getLong(Gist entity) {
            return entity.id;
        }

        @Override
        public void setLong(Gist entity, long value) {
            entity.id = value;
        }
    })
    .setPropertyName("id")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$id_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$id_state = value;
        }
    })
    .setKey(true)
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final QueryAttribute<Gist, GithubFileModel> FILES = 
    new AttributeBuilder<Gist, GithubFileModel>("files", GithubFileModel.class)
    .setProperty(new Property<Gist, GithubFileModel>() {
        @Override
        public GithubFileModel get(Gist entity) {
            return entity.files;
        }

        @Override
        public void set(Gist entity, GithubFileModel value) {
            entity.files = value;
        }
    })
    .setPropertyName("files")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$files_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$files_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.GitHubFilesConverter())
    .build();

    public static final QueryAttribute<Gist, User> USER = 
    new AttributeBuilder<Gist, User>("user_column", User.class)
    .setProperty(new Property<Gist, User>() {
        @Override
        public User get(Gist entity) {
            return entity.user;
        }

        @Override
        public void set(Gist entity, User value) {
            entity.user = value;
        }
    })
    .setPropertyName("user")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$user_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$user_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final QueryAttribute<Gist, User> OWNER = 
    new AttributeBuilder<Gist, User>("owner", User.class)
    .setProperty(new Property<Gist, User>() {
        @Override
        public User get(Gist entity) {
            return entity.owner;
        }

        @Override
        public void set(Gist entity, User value) {
            entity.owner = value;
        }
    })
    .setPropertyName("owner")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$owner_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$owner_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setConverter(new com.fastaccess.data.dao.converters.UserConverter())
    .build();

    public static final NumericAttribute<Gist, Date> CREATED_AT = 
    new AttributeBuilder<Gist, Date>("createdAt", Date.class)
    .setProperty(new Property<Gist, Date>() {
        @Override
        public Date get(Gist entity) {
            return entity.createdAt;
        }

        @Override
        public void set(Gist entity, Date value) {
            entity.createdAt = value;
        }
    })
    .setPropertyName("createdAt")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$createdAt_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$createdAt_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final StringAttribute<Gist, String> GIT_PUSH_URL = 
    new AttributeBuilder<Gist, String>("gitPushUrl", String.class)
    .setProperty(new Property<Gist, String>() {
        @Override
        public String get(Gist entity) {
            return entity.gitPushUrl;
        }

        @Override
        public void set(Gist entity, String value) {
            entity.gitPushUrl = value;
        }
    })
    .setPropertyName("gitPushUrl")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$gitPushUrl_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$gitPushUrl_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final NumericAttribute<Gist, Date> UPDATED_AT = 
    new AttributeBuilder<Gist, Date>("updatedAt", Date.class)
    .setProperty(new Property<Gist, Date>() {
        @Override
        public Date get(Gist entity) {
            return entity.updatedAt;
        }

        @Override
        public void set(Gist entity, Date value) {
            entity.updatedAt = value;
        }
    })
    .setPropertyName("updatedAt")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$updatedAt_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$updatedAt_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildNumeric();

    public static final NumericAttribute<Gist, Integer> COMMENTS = 
    new AttributeBuilder<Gist, Integer>("comments", int.class)
    .setProperty(new IntProperty<Gist>() {
        @Override
        public Integer get(Gist entity) {
            return entity.comments;
        }

        @Override
        public void set(Gist entity, Integer value) {
            entity.comments = value;
        }

        @Override
        public int getInt(Gist entity) {
            return entity.comments;
        }

        @Override
        public void setInt(Gist entity, int value) {
            entity.comments = value;
        }
    })
    .setPropertyName("comments")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$comments_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$comments_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final StringAttribute<Gist, String> COMMENTS_URL = 
    new AttributeBuilder<Gist, String>("commentsUrl", String.class)
    .setProperty(new Property<Gist, String>() {
        @Override
        public String get(Gist entity) {
            return entity.commentsUrl;
        }

        @Override
        public void set(Gist entity, String value) {
            entity.commentsUrl = value;
        }
    })
    .setPropertyName("commentsUrl")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$commentsUrl_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$commentsUrl_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Gist, String> COMMITS_URL = 
    new AttributeBuilder<Gist, String>("commitsUrl", String.class)
    .setProperty(new Property<Gist, String>() {
        @Override
        public String get(Gist entity) {
            return entity.commitsUrl;
        }

        @Override
        public void set(Gist entity, String value) {
            entity.commitsUrl = value;
        }
    })
    .setPropertyName("commitsUrl")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$commitsUrl_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$commitsUrl_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Gist, String> GIST_ID = 
    new AttributeBuilder<Gist, String>("gistId", String.class)
    .setProperty(new Property<Gist, String>() {
        @Override
        public String get(Gist entity) {
            return entity.gistId;
        }

        @Override
        public void set(Gist entity, String value) {
            entity.gistId = value;
        }
    })
    .setPropertyName("gistId")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$gistId_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$gistId_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Gist, String> HTML_URL = 
    new AttributeBuilder<Gist, String>("htmlUrl", String.class)
    .setProperty(new Property<Gist, String>() {
        @Override
        public String get(Gist entity) {
            return entity.htmlUrl;
        }

        @Override
        public void set(Gist entity, String value) {
            entity.htmlUrl = value;
        }
    })
    .setPropertyName("htmlUrl")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$htmlUrl_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$htmlUrl_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final QueryAttribute<Gist, Boolean> PUBLIC_X = 
    new AttributeBuilder<Gist, Boolean>("publicX", boolean.class)
    .setProperty(new BooleanProperty<Gist>() {
        @Override
        public Boolean get(Gist entity) {
            return entity.publicX;
        }

        @Override
        public void set(Gist entity, Boolean value) {
            entity.publicX = value;
        }

        @Override
        public boolean getBoolean(Gist entity) {
            return entity.publicX;
        }

        @Override
        public void setBoolean(Gist entity, boolean value) {
            entity.publicX = value;
        }
    })
    .setPropertyName("publicX")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$publicX_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$publicX_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final StringAttribute<Gist, String> DESCRIPTION = 
    new AttributeBuilder<Gist, String>("description", String.class)
    .setProperty(new Property<Gist, String>() {
        @Override
        public String get(Gist entity) {
            return entity.description;
        }

        @Override
        public void set(Gist entity, String value) {
            entity.description = value;
        }
    })
    .setPropertyName("description")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$description_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$description_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Gist, String> OWNER_NAME = 
    new AttributeBuilder<Gist, String>("ownerName", String.class)
    .setProperty(new Property<Gist, String>() {
        @Override
        public String get(Gist entity) {
            return entity.ownerName;
        }

        @Override
        public void set(Gist entity, String value) {
            entity.ownerName = value;
        }
    })
    .setPropertyName("ownerName")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$ownerName_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$ownerName_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Gist, String> FORKS_URL = 
    new AttributeBuilder<Gist, String>("forksUrl", String.class)
    .setProperty(new Property<Gist, String>() {
        @Override
        public String get(Gist entity) {
            return entity.forksUrl;
        }

        @Override
        public void set(Gist entity, String value) {
            entity.forksUrl = value;
        }
    })
    .setPropertyName("forksUrl")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$forksUrl_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$forksUrl_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<Gist, String> GIT_PULL_URL = 
    new AttributeBuilder<Gist, String>("gitPullUrl", String.class)
    .setProperty(new Property<Gist, String>() {
        @Override
        public String get(Gist entity) {
            return entity.gitPullUrl;
        }

        @Override
        public void set(Gist entity, String value) {
            entity.gitPullUrl = value;
        }
    })
    .setPropertyName("gitPullUrl")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$gitPullUrl_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$gitPullUrl_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final QueryAttribute<Gist, Boolean> TRUNCATED = 
    new AttributeBuilder<Gist, Boolean>("truncated", boolean.class)
    .setProperty(new BooleanProperty<Gist>() {
        @Override
        public Boolean get(Gist entity) {
            return entity.truncated;
        }

        @Override
        public void set(Gist entity, Boolean value) {
            entity.truncated = value;
        }

        @Override
        public boolean getBoolean(Gist entity) {
            return entity.truncated;
        }

        @Override
        public void setBoolean(Gist entity, boolean value) {
            entity.truncated = value;
        }
    })
    .setPropertyName("truncated")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$truncated_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$truncated_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final StringAttribute<Gist, String> URL = 
    new AttributeBuilder<Gist, String>("url", String.class)
    .setProperty(new Property<Gist, String>() {
        @Override
        public String get(Gist entity) {
            return entity.url;
        }

        @Override
        public void set(Gist entity, String value) {
            entity.url = value;
        }
    })
    .setPropertyName("url")
    .setPropertyState(new Property<Gist, PropertyState>() {
        @Override
        public PropertyState get(Gist entity) {
            return entity.$url_state;
        }

        @Override
        public void set(Gist entity, PropertyState value) {
            entity.$url_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final Type<Gist> $TYPE = new TypeBuilder<Gist>(Gist.class, "Gist")
    .setBaseType(AbstractGist.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<Gist>() {
        @Override
        public Gist get() {
            return new Gist();
        }
    })
    .setProxyProvider(new Function<Gist, EntityProxy<Gist>>() {
        @Override
        public EntityProxy<Gist> apply(Gist entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(PUBLIC_X)
    .addAttribute(CREATED_AT)
    .addAttribute(COMMENTS)
    .addAttribute(FORKS_URL)
    .addAttribute(FILES)
    .addAttribute(USER)
    .addAttribute(COMMENTS_URL)
    .addAttribute(URL)
    .addAttribute(TRUNCATED)
    .addAttribute(OWNER)
    .addAttribute(GIST_ID)
    .addAttribute(DESCRIPTION)
    .addAttribute(OWNER_NAME)
    .addAttribute(GIT_PULL_URL)
    .addAttribute(GIT_PUSH_URL)
    .addAttribute(UPDATED_AT)
    .addAttribute(ID)
    .addAttribute(HTML_URL)
    .addAttribute(COMMITS_URL)
    .build();

    private PropertyState $id_state;

    private PropertyState $files_state;

    private PropertyState $user_state;

    private PropertyState $owner_state;

    private PropertyState $createdAt_state;

    private PropertyState $gitPushUrl_state;

    private PropertyState $updatedAt_state;

    private PropertyState $comments_state;

    private PropertyState $commentsUrl_state;

    private PropertyState $commitsUrl_state;

    private PropertyState $gistId_state;

    private PropertyState $htmlUrl_state;

    private PropertyState $publicX_state;

    private PropertyState $description_state;

    private PropertyState $ownerName_state;

    private PropertyState $forksUrl_state;

    private PropertyState $gitPullUrl_state;

    private PropertyState $truncated_state;

    private PropertyState $url_state;

    private final transient EntityProxy<Gist> $proxy = new EntityProxy<Gist>(this, $TYPE);

    protected Gist(Parcel in) {
        super(in);
    }

    public Gist() {
    }

    public long getId() {
        return $proxy.get(ID);
    }

    public void setId(long id) {
        $proxy.set(ID, id);
    }

    public GithubFileModel getFiles() {
        return $proxy.get(FILES);
    }

    public void setFiles(GithubFileModel files) {
        $proxy.set(FILES, files);
    }

    public User getUser() {
        return $proxy.get(USER);
    }

    public void setUser(User user) {
        $proxy.set(USER, user);
    }

    public User getOwner() {
        return $proxy.get(OWNER);
    }

    public void setOwner(User owner) {
        $proxy.set(OWNER, owner);
    }

    public Date getCreatedAt() {
        return $proxy.get(CREATED_AT);
    }

    public void setCreatedAt(Date createdAt) {
        $proxy.set(CREATED_AT, createdAt);
    }

    public String getGitPushUrl() {
        return $proxy.get(GIT_PUSH_URL);
    }

    public void setGitPushUrl(String gitPushUrl) {
        $proxy.set(GIT_PUSH_URL, gitPushUrl);
    }

    public Date getUpdatedAt() {
        return $proxy.get(UPDATED_AT);
    }

    public void setUpdatedAt(Date updatedAt) {
        $proxy.set(UPDATED_AT, updatedAt);
    }

    public int getComments() {
        return $proxy.get(COMMENTS);
    }

    public void setComments(int comments) {
        $proxy.set(COMMENTS, comments);
    }

    public String getCommentsUrl() {
        return $proxy.get(COMMENTS_URL);
    }

    public void setCommentsUrl(String commentsUrl) {
        $proxy.set(COMMENTS_URL, commentsUrl);
    }

    public String getCommitsUrl() {
        return $proxy.get(COMMITS_URL);
    }

    public void setCommitsUrl(String commitsUrl) {
        $proxy.set(COMMITS_URL, commitsUrl);
    }

    public String getGistId() {
        return $proxy.get(GIST_ID);
    }

    public void setGistId(String gistId) {
        $proxy.set(GIST_ID, gistId);
    }

    public String getHtmlUrl() {
        return $proxy.get(HTML_URL);
    }

    public void setHtmlUrl(String htmlUrl) {
        $proxy.set(HTML_URL, htmlUrl);
    }

    public boolean isPublicX() {
        return $proxy.get(PUBLIC_X);
    }

    public void setPublicX(boolean publicX) {
        $proxy.set(PUBLIC_X, publicX);
    }

    public String getDescription() {
        return $proxy.get(DESCRIPTION);
    }

    public void setDescription(String description) {
        $proxy.set(DESCRIPTION, description);
    }

    public String getOwnerName() {
        return $proxy.get(OWNER_NAME);
    }

    public void setOwnerName(String ownerName) {
        $proxy.set(OWNER_NAME, ownerName);
    }

    public String getForksUrl() {
        return $proxy.get(FORKS_URL);
    }

    public void setForksUrl(String forksUrl) {
        $proxy.set(FORKS_URL, forksUrl);
    }

    public String getGitPullUrl() {
        return $proxy.get(GIT_PULL_URL);
    }

    public void setGitPullUrl(String gitPullUrl) {
        $proxy.set(GIT_PULL_URL, gitPullUrl);
    }

    public boolean isTruncated() {
        return $proxy.get(TRUNCATED);
    }

    public void setTruncated(boolean truncated) {
        $proxy.set(TRUNCATED, truncated);
    }

    public String getUrl() {
        return $proxy.get(URL);
    }

    public void setUrl(String url) {
        $proxy.set(URL, url);
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
